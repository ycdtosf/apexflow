// this container class was auto-generated by ApexFlow
public class MethodContainer implements IMethodContainer {
	public void init() {
		ApexFlow.register(new SystemBusinessHoursAdd());
		ApexFlow.register(new SystemBusinessHoursAddGmt());
		ApexFlow.register(new SystemBusinessHoursDiff());
		ApexFlow.register(new SystemBusinessHoursIsWithin());
		ApexFlow.register(new SystemBusinessHoursNextStartDate());
		ApexFlow.register(new SystemDateAddDays());
		ApexFlow.register(new SystemDateAddMonths());
		ApexFlow.register(new SystemDateAddYears());
		ApexFlow.register(new SystemDateDay());
		ApexFlow.register(new SystemDateDayOfYear());
		ApexFlow.register(new SystemDateDaysBetween());
		ApexFlow.register(new SystemDateDaysInMonth());
		ApexFlow.register(new SystemDateFormat());
		ApexFlow.register(new SystemDateIsLeapYear());
		ApexFlow.register(new SystemDateIsSameDay());
		ApexFlow.register(new SystemDateMonth());
		ApexFlow.register(new SystemDateMonthsBetween());
		ApexFlow.register(new SystemDateNewInstance());
		ApexFlow.register(new SystemDateParse());
		ApexFlow.register(new SystemDateToday());
		ApexFlow.register(new SystemDateToStartOfMonth());
		ApexFlow.register(new SystemDateToStartOfWeek());
		ApexFlow.register(new SystemDateValueOf());
		ApexFlow.register(new SystemDate2ValueOf());
		ApexFlow.register(new SystemDateYear());
		ApexFlow.register(new SystemDatetimeAddDays());
		ApexFlow.register(new SystemDatetimeAddHours());
		ApexFlow.register(new SystemDatetimeAddMinutes());
		ApexFlow.register(new SystemDatetimeAddMonths());
		ApexFlow.register(new SystemDatetimeAddSeconds());
		ApexFlow.register(new SystemDatetimeAddYears());
		ApexFlow.register(new SystemDatetimeDate());
		ApexFlow.register(new SystemDatetimeDateGMT());
		ApexFlow.register(new SystemDatetimeDay());
		ApexFlow.register(new SystemDatetimeDayGmt());
		ApexFlow.register(new SystemDatetimeDayOfYear());
		ApexFlow.register(new SystemDatetimeDayOfYearGmt());
		ApexFlow.register(new SystemDatetimeFormat());
		ApexFlow.register(new SystemDatetime2Format());
		ApexFlow.register(new SystemDatetime3Format());
		ApexFlow.register(new SystemDatetimeFormatGmt());
		ApexFlow.register(new SystemDatetimeFormatLong());
		ApexFlow.register(new SystemDatetimeGetTime());
		ApexFlow.register(new SystemDatetimeHour());
		ApexFlow.register(new SystemDatetimeHourGmt());
		ApexFlow.register(new SystemDatetimeIsSameDay());
		ApexFlow.register(new SystemDatetimeMillisecond());
		ApexFlow.register(new SystemDatetimeMillisecondGmt());
		ApexFlow.register(new SystemDatetimeMinute());
		ApexFlow.register(new SystemDatetimeMinuteGmt());
		ApexFlow.register(new SystemDatetimeMonth());
		ApexFlow.register(new SystemDatetimeMonthGmt());
		ApexFlow.register(new SystemDatetimeNewInstance());
		ApexFlow.register(new SystemDatetime2NewInstance());
		ApexFlow.register(new SystemDatetime3NewInstance());
		ApexFlow.register(new SystemDatetime4NewInstance());
		ApexFlow.register(new SystemDatetimeNewInstanceGmt());
		ApexFlow.register(new SystemDatetime2NewInstanceGmt());
		ApexFlow.register(new SystemDatetime3NewInstanceGmt());
		ApexFlow.register(new SystemDatetimeNow());
		ApexFlow.register(new SystemDatetimeParse());
		ApexFlow.register(new SystemDatetimeSecond());
		ApexFlow.register(new SystemDatetimeSecondGmt());
		ApexFlow.register(new SystemDatetimeTime());
		ApexFlow.register(new SystemDatetimeTimeGmt());
		ApexFlow.register(new SystemDatetimeValueOf());
		ApexFlow.register(new SystemDatetime2ValueOf());
		ApexFlow.register(new SystemDatetimeValueOfGmt());
		ApexFlow.register(new SystemDatetimeYear());
		ApexFlow.register(new SystemDatetimeYearGmt());
		ApexFlow.register(new SystemLabelGet());
		ApexFlow.register(new SystemLabelTranslationExists());
		ApexFlow.register(new SystemMathAbs());
		ApexFlow.register(new SystemMath2Abs());
		ApexFlow.register(new SystemMath3Abs());
		ApexFlow.register(new SystemMath4Abs());
		ApexFlow.register(new SystemMathAcos());
		ApexFlow.register(new SystemMath2Acos());
		ApexFlow.register(new SystemMathAsin());
		ApexFlow.register(new SystemMath2Asin());
		ApexFlow.register(new SystemMathAtan());
		ApexFlow.register(new SystemMath2Atan());
		ApexFlow.register(new SystemMathAtan2());
		ApexFlow.register(new SystemMath2Atan2());
		ApexFlow.register(new SystemMathCbrt());
		ApexFlow.register(new SystemMath2Cbrt());
		ApexFlow.register(new SystemMathCeil());
		ApexFlow.register(new SystemMath2Ceil());
		ApexFlow.register(new SystemMathCos());
		ApexFlow.register(new SystemMath2Cos());
		ApexFlow.register(new SystemMathCosh());
		ApexFlow.register(new SystemMath2Cosh());
		ApexFlow.register(new SystemMathExp());
		ApexFlow.register(new SystemMath2Exp());
		ApexFlow.register(new SystemMathFloor());
		ApexFlow.register(new SystemMath2Floor());
		ApexFlow.register(new SystemMathLog());
		ApexFlow.register(new SystemMath2Log());
		ApexFlow.register(new SystemMathLog10());
		ApexFlow.register(new SystemMath2Log10());
		ApexFlow.register(new SystemMathMax());
		ApexFlow.register(new SystemMath2Max());
		ApexFlow.register(new SystemMath3Max());
		ApexFlow.register(new SystemMath4Max());
		ApexFlow.register(new SystemMathMin());
		ApexFlow.register(new SystemMath2Min());
		ApexFlow.register(new SystemMath3Min());
		ApexFlow.register(new SystemMath4Min());
		ApexFlow.register(new SystemMathMod());
		ApexFlow.register(new SystemMath2Mod());
		ApexFlow.register(new SystemMathPow());
		ApexFlow.register(new SystemMathRandom());
		ApexFlow.register(new SystemMathRint());
		ApexFlow.register(new SystemMath2Rint());
		ApexFlow.register(new SystemMathRound());
		ApexFlow.register(new SystemMath2Round());
		ApexFlow.register(new SystemMathRoundToLong());
		ApexFlow.register(new SystemMath2RoundToLong());
		ApexFlow.register(new SystemMathSignum());
		ApexFlow.register(new SystemMath2Signum());
		ApexFlow.register(new SystemMathSin());
		ApexFlow.register(new SystemMath2Sin());
		ApexFlow.register(new SystemMathSinh());
		ApexFlow.register(new SystemMath2Sinh());
		ApexFlow.register(new SystemMathSqrt());
		ApexFlow.register(new SystemMath2Sqrt());
		ApexFlow.register(new SystemMathTan());
		ApexFlow.register(new SystemMath2Tan());
		ApexFlow.register(new SystemMathTanh());
		ApexFlow.register(new SystemMath2Tanh());
		ApexFlow.register(new SystemStringAbbreviate());
		ApexFlow.register(new SystemString2Abbreviate());
		ApexFlow.register(new SystemStringCapitalize());
		ApexFlow.register(new SystemStringCenter());
		ApexFlow.register(new SystemString2Center());
		ApexFlow.register(new SystemStringCharAt());
		ApexFlow.register(new SystemStringCodePointAt());
		ApexFlow.register(new SystemStringCodePointBefore());
		ApexFlow.register(new SystemStringCodePointCount());
		ApexFlow.register(new SystemStringCompareTo());
		ApexFlow.register(new SystemStringContains());
		ApexFlow.register(new SystemStringContainsAny());
		ApexFlow.register(new SystemStringContainsIgnoreCase());
		ApexFlow.register(new SystemStringContainsNone());
		ApexFlow.register(new SystemStringContainsOnly());
		ApexFlow.register(new SystemStringContainsWhitespace());
		ApexFlow.register(new SystemStringCountMatches());
		ApexFlow.register(new SystemStringDeleteWhitespace());
		ApexFlow.register(new SystemStringDifference());
		ApexFlow.register(new SystemStringEndsWith());
		ApexFlow.register(new SystemStringEndsWithIgnoreCase());
		ApexFlow.register(new SystemStringEquals());
		ApexFlow.register(new SystemString2Equals());
		ApexFlow.register(new SystemStringEqualsIgnoreCase());
		ApexFlow.register(new SystemStringEscapeCsv());
		ApexFlow.register(new SystemStringEscapeEcmaScript());
		ApexFlow.register(new SystemStringEscapeHtml3());
		ApexFlow.register(new SystemStringEscapeHtml4());
		ApexFlow.register(new SystemStringEscapeJava());
		ApexFlow.register(new SystemStringEscapeSingleQuotes());
		ApexFlow.register(new SystemStringEscapeUnicode());
		ApexFlow.register(new SystemStringEscapeXml());
		ApexFlow.register(new SystemStringFormat());
		ApexFlow.register(new SystemStringFromCharArray());
		ApexFlow.register(new SystemStringGetChars());
		ApexFlow.register(new SystemStringGetCommonPrefix());
		ApexFlow.register(new SystemStringGetLevenshteinDistance());
		ApexFlow.register(new SystemString2GetLevenshteinDistance());
		ApexFlow.register(new SystemStringHashCode());
		ApexFlow.register(new SystemStringIndexOf());
		ApexFlow.register(new SystemString2IndexOf());
		ApexFlow.register(new SystemStringIndexOfAny());
		ApexFlow.register(new SystemStringIndexOfAnyBut());
		ApexFlow.register(new SystemStringIndexOfChar());
		ApexFlow.register(new SystemString2IndexOfChar());
		ApexFlow.register(new SystemStringIndexOfDifference());
		ApexFlow.register(new SystemStringIndexOfIgnoreCase());
		ApexFlow.register(new SystemString2IndexOfIgnoreCase());
		ApexFlow.register(new SystemStringIsAllLowerCase());
		ApexFlow.register(new SystemStringIsAllUpperCase());
		ApexFlow.register(new SystemStringIsAlpha());
		ApexFlow.register(new SystemStringIsAlphaSpace());
		ApexFlow.register(new SystemStringIsAlphanumeric());
		ApexFlow.register(new SystemStringIsAlphanumericSpace());
		ApexFlow.register(new SystemStringIsAsciiPrintable());
		ApexFlow.register(new SystemStringIsBlank());
		ApexFlow.register(new SystemStringIsEmpty());
		ApexFlow.register(new SystemStringIsNotBlank());
		ApexFlow.register(new SystemStringIsNotEmpty());
		ApexFlow.register(new SystemStringIsNumeric());
		ApexFlow.register(new SystemStringIsNumericSpace());
		ApexFlow.register(new SystemStringIsWhitespace());
		ApexFlow.register(new SystemStringJoin());
		ApexFlow.register(new SystemStringLastIndexOf());
		ApexFlow.register(new SystemString2LastIndexOf());
		ApexFlow.register(new SystemStringLastIndexOfChar());
		ApexFlow.register(new SystemString2LastIndexOfChar());
		ApexFlow.register(new SystemStringLastIndexOfIgnoreCase());
		ApexFlow.register(new SystemString2LastIndexOfIgnoreCase());
		ApexFlow.register(new SystemStringLeft());
		ApexFlow.register(new SystemStringLeftPad());
		ApexFlow.register(new SystemStringLength());
		ApexFlow.register(new SystemStringMid());
		ApexFlow.register(new SystemStringNormalizeSpace());
		ApexFlow.register(new SystemStringOffsetByCodePoints());
		ApexFlow.register(new SystemStringRemove());
		ApexFlow.register(new SystemStringRemoveEnd());
		ApexFlow.register(new SystemStringRemoveEndIgnoreCase());
		ApexFlow.register(new SystemStringRemoveStart());
		ApexFlow.register(new SystemStringRemoveStartIgnoreCase());
		ApexFlow.register(new SystemStringRepeat());
		ApexFlow.register(new SystemString2Repeat());
		ApexFlow.register(new SystemStringReplace());
		ApexFlow.register(new SystemStringReplaceAll());
		ApexFlow.register(new SystemStringReplaceFirst());
		ApexFlow.register(new SystemStringReverse());
		ApexFlow.register(new SystemStringRight());
		ApexFlow.register(new SystemStringRightPad());
		ApexFlow.register(new SystemStringSplit());
		ApexFlow.register(new SystemString2Split());
		ApexFlow.register(new SystemStringSplitByCharacterType());
		ApexFlow.register(new SystemStringSplitByCharacterTypeCamelCase());
		ApexFlow.register(new SystemStringStartsWith());
		ApexFlow.register(new SystemStringStartsWithIgnoreCase());
		ApexFlow.register(new SystemStringStripHtmlTags());
		ApexFlow.register(new SystemStringSubstring());
		ApexFlow.register(new SystemString2Substring());
		ApexFlow.register(new SystemStringSubstringAfter());
		ApexFlow.register(new SystemStringSubstringAfterLast());
		ApexFlow.register(new SystemStringSubstringBefore());
		ApexFlow.register(new SystemStringSubstringBeforeLast());
		ApexFlow.register(new SystemStringSubstringBetween());
		ApexFlow.register(new SystemString2SubstringBetween());
		ApexFlow.register(new SystemStringSwapCase());
		ApexFlow.register(new SystemStringToLowerCase());
		ApexFlow.register(new SystemString2ToLowerCase());
		ApexFlow.register(new SystemStringToUpperCase());
		ApexFlow.register(new SystemString2ToUpperCase());
		ApexFlow.register(new SystemStringTrim());
		ApexFlow.register(new SystemStringUncapitalize());
		ApexFlow.register(new SystemStringUnescapeCsv());
		ApexFlow.register(new SystemStringUnescapeEcmaScript());
		ApexFlow.register(new SystemStringUnescapeHtml3());
		ApexFlow.register(new SystemStringUnescapeHtml4());
		ApexFlow.register(new SystemStringUnescapeJava());
		ApexFlow.register(new SystemStringUnescapeUnicode());
		ApexFlow.register(new SystemStringUnescapeXml());
		ApexFlow.register(new SystemStringValueOf());
		ApexFlow.register(new SystemString2ValueOf());
		ApexFlow.register(new SystemString3ValueOf());
		ApexFlow.register(new SystemString4ValueOf());
		ApexFlow.register(new SystemString5ValueOf());
		ApexFlow.register(new SystemString6ValueOf());
		ApexFlow.register(new SystemString7ValueOf());
		ApexFlow.register(new SystemStringValueOfGmt());
		ApexFlow.register(new SystemUserInfoGetDefaultCurrency());
		ApexFlow.register(new SystemUserInfoGetFirstName());
		ApexFlow.register(new SystemUserInfoGetLanguage());
		ApexFlow.register(new SystemUserInfoGetLastName());
		ApexFlow.register(new SystemUserInfoGetLocale());
		ApexFlow.register(new SystemUserInfoGetName());
		ApexFlow.register(new SystemUserInfoGetOrganizationId());
		ApexFlow.register(new SystemUserInfoGetOrganizationName());
		ApexFlow.register(new SystemUserInfoGetProfileId());
		ApexFlow.register(new SystemUserInfoGetSessionId());
		ApexFlow.register(new SystemUserInfoGetUiTheme());
		ApexFlow.register(new SystemUserInfoGetUiThemeDisplayed());
		ApexFlow.register(new SystemUserInfoGetUserEmail());
		ApexFlow.register(new SystemUserInfoGetUserId());
		ApexFlow.register(new SystemUserInfoGetUserName());
		ApexFlow.register(new SystemUserInfoGetUserRoleId());
		ApexFlow.register(new SystemUserInfoGetUserType());
		ApexFlow.register(new SystemUserInfoIsCurrentUserLicensed());
		ApexFlow.register(new SystemUserInfoIsCurrentUserLicensedForPackage());
		ApexFlow.register(new SystemUserInfoIsMultiCurrencyOrganization());
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemBusinessHoursAdd extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'BusinessHours';
			this.methodName = 'add';
			this.isStatic = true;
			this.inputType = 'BusinessHours';
			this.outputType = 'Datetime';
			this.description = 'Adds an interval of time from a start Datetime traversing business hours only. Returns the result Datetime in the local time zone.';
			this.addParameter('businessHoursId', 'String', '');
			this.addParameter('startDate', 'Datetime', '');
			this.addParameter('intervalMilliseconds', 'Long', '');
		}
		public override void execute() {
			String businessHoursId = (String)getParameter('businessHoursId').value.stringValue;
			Datetime startDate = (Datetime)getParameter('startDate').value.datetimeValue;
			Long intervalMilliseconds = (Long)getParameter('intervalMilliseconds').value.longValue;
			this.outputValue.datetimeValue = BusinessHours.add(
				businessHoursId,
				startDate,
				intervalMilliseconds
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemBusinessHoursAddGmt extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'BusinessHours';
			this.methodName = 'addGmt';
			this.isStatic = true;
			this.inputType = 'BusinessHours';
			this.outputType = 'Datetime';
			this.description = 'Adds an interval of milliseconds from a start Datetime traversing business hours only. Returns the result Datetime in GMT.';
			this.addParameter('businessHoursId', 'String', '');
			this.addParameter('startDate', 'Datetime', '');
			this.addParameter('intervalMilliseconds', 'Long', '');
		}
		public override void execute() {
			String businessHoursId = (String)getParameter('businessHoursId').value.stringValue;
			Datetime startDate = (Datetime)getParameter('startDate').value.datetimeValue;
			Long intervalMilliseconds = (Long)getParameter('intervalMilliseconds').value.longValue;
			this.outputValue.datetimeValue = BusinessHours.addGmt(
				businessHoursId,
				startDate,
				intervalMilliseconds
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemBusinessHoursDiff extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'BusinessHours';
			this.methodName = 'diff';
			this.isStatic = true;
			this.inputType = 'BusinessHours';
			this.outputType = 'Long';
			this.description = 'Returns the difference in milliseconds between a start and end Datetime based on a specific set of business hours.';
			this.addParameter('businessHoursId', 'String', '');
			this.addParameter('startDate', 'Datetime', '');
			this.addParameter('endDate', 'Datetime', '');
		}
		public override void execute() {
			String businessHoursId = (String)getParameter('businessHoursId').value.stringValue;
			Datetime startDate = (Datetime)getParameter('startDate').value.datetimeValue;
			Datetime endDate = (Datetime)getParameter('endDate').value.datetimeValue;
			this.outputValue.longValue = BusinessHours.diff(
				businessHoursId,
				startDate,
				endDate
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemBusinessHoursIsWithin extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'BusinessHours';
			this.methodName = 'isWithin';
			this.isStatic = true;
			this.inputType = 'BusinessHours';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
			this.addParameter('businessHoursId', 'String', '');
			this.addParameter('targetDate', 'Datetime', '');
		}
		public override void execute() {
			String businessHoursId = (String)getParameter('businessHoursId').value.stringValue;
			Datetime targetDate = (Datetime)getParameter('targetDate').value.datetimeValue;
			this.outputValue.booleanValue = BusinessHours.isWithin(
				businessHoursId,
				targetDate
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemBusinessHoursNextStartDate extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'BusinessHours';
			this.methodName = 'nextStartDate';
			this.isStatic = true;
			this.inputType = 'BusinessHours';
			this.outputType = 'Datetime';
			this.description = 'Starting from the specified target date, returns the next date when business hours are open. If the specified target date falls within business hours, this target date is returned.';
			this.addParameter('businessHoursId', 'String', '');
			this.addParameter('targetDate', 'Datetime', '');
		}
		public override void execute() {
			String businessHoursId = (String)getParameter('businessHoursId').value.stringValue;
			Datetime targetDate = (Datetime)getParameter('targetDate').value.datetimeValue;
			this.outputValue.datetimeValue = BusinessHours.nextStartDate(
				businessHoursId,
				targetDate
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDateAddDays extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Date';
			this.methodName = 'addDays';
			this.isStatic = false;
			this.inputType = 'Date';
			this.outputType = 'Date';
			this.description = 'Adds the specified number of additional days to a Date. ';
			this.addParameter('additionalDays', 'Integer', '');
		}
		public override void execute() {
			Integer additionalDays = (Integer)getParameter('additionalDays').value.integerValue;
			this.outputValue.dateValue = ((Date)inputValue.dateValue).addDays(
				additionalDays);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDateAddMonths extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Date';
			this.methodName = 'addMonths';
			this.isStatic = false;
			this.inputType = 'Date';
			this.outputType = 'Date';
			this.description = 'Adds the specified number of additional months to a Date ';
			this.addParameter('additionalMonths', 'Integer', '');
		}
		public override void execute() {
			Integer additionalMonths = (Integer)getParameter('additionalMonths').value.integerValue;
			this.outputValue.dateValue = ((Date)inputValue.dateValue).addMonths(
				additionalMonths);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDateAddYears extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Date';
			this.methodName = 'addYears';
			this.isStatic = false;
			this.inputType = 'Date';
			this.outputType = 'Date';
			this.description = 'Adds the specified number of additional years to a Date ';
			this.addParameter('additionalYears', 'Integer', '');
		}
		public override void execute() {
			Integer additionalYears = (Integer)getParameter('additionalYears').value.integerValue;
			this.outputValue.dateValue = ((Date)inputValue.dateValue).addYears(
				additionalYears);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDateDay extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Date';
			this.methodName = 'day';
			this.isStatic = false;
			this.inputType = 'Date';
			this.outputType = 'Integer';
			this.description = 'Returns the day-of-month component of a Date.';
		}
		public override void execute() {
			this.outputValue.integerValue = ((Date)inputValue.dateValue).day(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDateDayOfYear extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Date';
			this.methodName = 'dayOfYear';
			this.isStatic = false;
			this.inputType = 'Date';
			this.outputType = 'Integer';
			this.description = 'Returns the day-of-year component of a Date.';
		}
		public override void execute() {
			this.outputValue.integerValue = ((Date)inputValue.dateValue).dayOfYear(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDateDaysBetween extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Date';
			this.methodName = 'daysBetween';
			this.isStatic = false;
			this.inputType = 'Date';
			this.outputType = 'Integer';
			this.description = 'Returns the number of days between the Date that called the method and the specified date. ';
			this.addParameter('secondDate', 'Date', '');
		}
		public override void execute() {
			Date secondDate = (Date)getParameter('secondDate').value.dateValue;
			this.outputValue.integerValue = ((Date)inputValue.dateValue).daysBetween(
				secondDate);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDateDaysInMonth extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Date';
			this.methodName = 'daysInMonth';
			this.isStatic = true;
			this.inputType = 'Date';
			this.outputType = 'Integer';
			this.description = 'Returns the number of days in the month for the specified ';
			this.addParameter('year', 'Integer', '');
			this.addParameter('month', 'Integer', '');
		}
		public override void execute() {
			Integer year = (Integer)getParameter('year').value.integerValue;
			Integer month = (Integer)getParameter('month').value.integerValue;
			this.outputValue.integerValue = Date.daysInMonth(
				year,
				month
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDateFormat extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Date';
			this.methodName = 'format';
			this.isStatic = false;
			this.inputType = 'Date';
			this.outputType = 'String';
			this.description = 'Returns the Date as a string using the locale of the context user ';
		}
		public override void execute() {
			this.outputValue.stringValue = ((Date)inputValue.dateValue).format(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDateIsLeapYear extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Date';
			this.methodName = 'isLeapYear';
			this.isStatic = true;
			this.inputType = 'Date';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
			this.addParameter('year', 'Integer', '');
		}
		public override void execute() {
			Integer year = (Integer)getParameter('year').value.integerValue;
			this.outputValue.booleanValue = Date.isLeapYear(
				year
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDateIsSameDay extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Date';
			this.methodName = 'isSameDay';
			this.isStatic = false;
			this.inputType = 'Date';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
			this.addParameter('dateToCompare', 'Date', '');
		}
		public override void execute() {
			Date dateToCompare = (Date)getParameter('dateToCompare').value.dateValue;
			this.outputValue.booleanValue = ((Date)inputValue.dateValue).isSameDay(
				dateToCompare);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDateMonth extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Date';
			this.methodName = 'month';
			this.isStatic = false;
			this.inputType = 'Date';
			this.outputType = 'Integer';
			this.description = 'Returns the month component of a Date (1=Jan). ';
		}
		public override void execute() {
			this.outputValue.integerValue = ((Date)inputValue.dateValue).month(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDateMonthsBetween extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Date';
			this.methodName = 'monthsBetween';
			this.isStatic = false;
			this.inputType = 'Date';
			this.outputType = 'Integer';
			this.description = 'Returns the number of months between the Date that called the method and the specified date, ignoring the difference in days. ';
			this.addParameter('secondDate', 'Date', '');
		}
		public override void execute() {
			Date secondDate = (Date)getParameter('secondDate').value.dateValue;
			this.outputValue.integerValue = ((Date)inputValue.dateValue).monthsBetween(
				secondDate);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDateNewInstance extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Date';
			this.methodName = 'newInstance';
			this.isStatic = true;
			this.inputType = 'Date';
			this.outputType = 'Date';
			this.description = 'Constructs a Date from Integer representations of the ';
			this.addParameter('year', 'Integer', '');
			this.addParameter('month', 'Integer', '');
			this.addParameter('day', 'Integer', '');
		}
		public override void execute() {
			Integer year = (Integer)getParameter('year').value.integerValue;
			Integer month = (Integer)getParameter('month').value.integerValue;
			Integer day = (Integer)getParameter('day').value.integerValue;
			this.outputValue.dateValue = Date.newInstance(
				year,
				month,
				day
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDateParse extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Date';
			this.methodName = 'parse';
			this.isStatic = true;
			this.inputType = 'Date';
			this.outputType = 'Date';
			this.description = 'Constructs a Date from a String. The format of the String depends on the local date format. ';
			this.addParameter('stringDate', 'String', '');
		}
		public override void execute() {
			String stringDate = (String)getParameter('stringDate').value.stringValue;
			this.outputValue.dateValue = Date.parse(
				stringDate
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDateToday extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Date';
			this.methodName = 'today';
			this.isStatic = true;
			this.inputType = 'Date';
			this.outputType = 'Date';
			this.description = 'Returns the current date in the current user&#39;s time zone. ';
		}
		public override void execute() {
			this.outputValue.dateValue = Date.today(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDateToStartOfMonth extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Date';
			this.methodName = 'toStartOfMonth';
			this.isStatic = false;
			this.inputType = 'Date';
			this.outputType = 'Date';
			this.description = 'Returns the first of the month for the Date that called the method. ';
		}
		public override void execute() {
			this.outputValue.dateValue = ((Date)inputValue.dateValue).toStartOfMonth(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDateToStartOfWeek extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Date';
			this.methodName = 'toStartOfWeek';
			this.isStatic = false;
			this.inputType = 'Date';
			this.outputType = 'Date';
			this.description = 'Returns the start of the week for the Date that called the method, depending on the context user&#39;s locale. ';
		}
		public override void execute() {
			this.outputValue.dateValue = ((Date)inputValue.dateValue).toStartOfWeek(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDateValueOf extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Date';
			this.methodName = 'valueOf';
			this.isStatic = true;
			this.inputType = 'Date';
			this.outputType = 'Date';
			this.description = 'Returns a Date that contains the value of the specified String. ';
			this.addParameter('stringDate', 'String', '');
		}
		public override void execute() {
			String stringDate = (String)getParameter('stringDate').value.stringValue;
			this.outputValue.dateValue = Date.valueOf(
				stringDate
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDate2ValueOf extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Date';
			this.methodName = 'valueOf';
			this.isStatic = true;
			this.inputType = 'Date';
			this.outputType = 'Date';
			this.description = 'Converts the specified object to a ';
			this.addParameter('fieldValue', 'Object', '');
		}
		public override void execute() {
			Object fieldValue = (Object)getParameter('fieldValue').value.objectValue;
			this.outputValue.dateValue = Date.valueOf(
				fieldValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDateYear extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Date';
			this.methodName = 'year';
			this.isStatic = false;
			this.inputType = 'Date';
			this.outputType = 'Integer';
			this.description = 'Returns the year component of a Date';
		}
		public override void execute() {
			this.outputValue.integerValue = ((Date)inputValue.dateValue).year(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeAddDays extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'addDays';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Datetime';
			this.description = 'Adds the specified number of days to a Datetime.';
			this.addParameter('additionalDays', 'Integer', '');
		}
		public override void execute() {
			Integer additionalDays = (Integer)getParameter('additionalDays').value.integerValue;
			this.outputValue.datetimeValue = ((Datetime)inputValue.datetimeValue).addDays(
				additionalDays);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeAddHours extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'addHours';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Datetime';
			this.description = 'Adds the specified number of hours to a Datetime.';
			this.addParameter('additionalHours', 'Integer', '');
		}
		public override void execute() {
			Integer additionalHours = (Integer)getParameter('additionalHours').value.integerValue;
			this.outputValue.datetimeValue = ((Datetime)inputValue.datetimeValue).addHours(
				additionalHours);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeAddMinutes extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'addMinutes';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Datetime';
			this.description = 'Adds the specified number of minutes to a Datetime.';
			this.addParameter('additionalMinutes', 'Integer', '');
		}
		public override void execute() {
			Integer additionalMinutes = (Integer)getParameter('additionalMinutes').value.integerValue;
			this.outputValue.datetimeValue = ((Datetime)inputValue.datetimeValue).addMinutes(
				additionalMinutes);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeAddMonths extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'addMonths';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Datetime';
			this.description = 'Adds the specified number of months to a Datetime.';
			this.addParameter('additionalMonths', 'Integer', '');
		}
		public override void execute() {
			Integer additionalMonths = (Integer)getParameter('additionalMonths').value.integerValue;
			this.outputValue.datetimeValue = ((Datetime)inputValue.datetimeValue).addMonths(
				additionalMonths);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeAddSeconds extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'addSeconds';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Datetime';
			this.description = 'Adds the specified number of seconds to a Datetime.';
			this.addParameter('additionalSeconds', 'Integer', '');
		}
		public override void execute() {
			Integer additionalSeconds = (Integer)getParameter('additionalSeconds').value.integerValue;
			this.outputValue.datetimeValue = ((Datetime)inputValue.datetimeValue).addSeconds(
				additionalSeconds);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeAddYears extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'addYears';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Datetime';
			this.description = 'Adds the specified number of years to a Datetime.';
			this.addParameter('additionalYears', 'Integer', '');
		}
		public override void execute() {
			Integer additionalYears = (Integer)getParameter('additionalYears').value.integerValue;
			this.outputValue.datetimeValue = ((Datetime)inputValue.datetimeValue).addYears(
				additionalYears);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeDate extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'date';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Date';
			this.description = 'Returns the Date component of a Datetime in the local time zone of the context user. ';
		}
		public override void execute() {
			this.outputValue.dateValue = ((Datetime)inputValue.datetimeValue).date(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeDateGMT extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'dateGMT';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Date';
			this.description = 'Return the Date component of a Datetime in the GMT time zone.';
		}
		public override void execute() {
			this.outputValue.dateValue = ((Datetime)inputValue.datetimeValue).dateGMT(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeDay extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'day';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Integer';
			this.description = 'Returns the day-of-month component of a Datetime in the local time zone of the context user.';
		}
		public override void execute() {
			this.outputValue.integerValue = ((Datetime)inputValue.datetimeValue).day(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeDayGmt extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'dayGmt';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Integer';
			this.description = 'Returns the day-of-month component of a Datetime in the GMT time zone.';
		}
		public override void execute() {
			this.outputValue.integerValue = ((Datetime)inputValue.datetimeValue).dayGmt(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeDayOfYear extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'dayOfYear';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Integer';
			this.description = 'Returns the day-of-year component of a Datetime in the local time zone of the context user.';
		}
		public override void execute() {
			this.outputValue.integerValue = ((Datetime)inputValue.datetimeValue).dayOfYear(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeDayOfYearGmt extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'dayOfYearGmt';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Integer';
			this.description = 'Returns the day-of-year component of a Datetime in the GMT time zone.';
		}
		public override void execute() {
			this.outputValue.integerValue = ((Datetime)inputValue.datetimeValue).dayOfYearGmt(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeFormat extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'format';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'String';
			this.description = 'Converts the date to the local time zone and returns the converted date as a formatted string using the locale of the context user. If the time zone cannot be determined, GMT is used.';
		}
		public override void execute() {
			this.outputValue.stringValue = ((Datetime)inputValue.datetimeValue).format(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetime2Format extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'format';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'String';
			this.description = 'Converts the date to the local time zone and returns the converted date as a string using the supplied Java simple date format. If the time zone cannot be determined, GMT is used.';
			this.addParameter('dateFormatString', 'String', '');
		}
		public override void execute() {
			String dateFormatString = (String)getParameter('dateFormatString').value.stringValue;
			this.outputValue.stringValue = ((Datetime)inputValue.datetimeValue).format(
				dateFormatString);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetime3Format extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'format';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'String';
			this.description = 'Converts the date to the specified time zone and returns the converted date as a string using the supplied Java simple date format. If the supplied time zone is not in the correct format, GMT is used.';
			this.addParameter('dateFormatString', 'String', '');
			this.addParameter('timezone', 'String', '');
		}
		public override void execute() {
			String dateFormatString = (String)getParameter('dateFormatString').value.stringValue;
			String timezone = (String)getParameter('timezone').value.stringValue;
			this.outputValue.stringValue = ((Datetime)inputValue.datetimeValue).format(
				dateFormatString,timezone);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeFormatGmt extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'formatGmt';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'String';
			this.description = 'Returns a Datetime as a string using the supplied Java simple date format and the GMT time zone.';
			this.addParameter('dateFormatString', 'String', '');
		}
		public override void execute() {
			String dateFormatString = (String)getParameter('dateFormatString').value.stringValue;
			this.outputValue.stringValue = ((Datetime)inputValue.datetimeValue).formatGmt(
				dateFormatString);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeFormatLong extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'formatLong';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'String';
			this.description = 'Converts the date to the local time zone and returns the converted date in long date format.';
		}
		public override void execute() {
			this.outputValue.stringValue = ((Datetime)inputValue.datetimeValue).formatLong(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeGetTime extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'getTime';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Long';
			this.description = 'Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this DateTime object.';
		}
		public override void execute() {
			this.outputValue.longValue = ((Datetime)inputValue.datetimeValue).getTime(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeHour extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'hour';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Integer';
			this.description = 'Returns the hour component of a Datetime in the local time zone of the context user.';
		}
		public override void execute() {
			this.outputValue.integerValue = ((Datetime)inputValue.datetimeValue).hour(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeHourGmt extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'hourGmt';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Integer';
			this.description = 'Returns the hour component of a Datetime in the GMT time zone.';
		}
		public override void execute() {
			this.outputValue.integerValue = ((Datetime)inputValue.datetimeValue).hourGmt(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeIsSameDay extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'isSameDay';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Boolean';
			this.description = 'Returns true if the Datetime that called the method is the same as the specified Datetime in the local time zone of the context user.';
			this.addParameter('dateToCompare', 'Datetime', '');
		}
		public override void execute() {
			Datetime dateToCompare = (Datetime)getParameter('dateToCompare').value.datetimeValue;
			this.outputValue.booleanValue = ((Datetime)inputValue.datetimeValue).isSameDay(
				dateToCompare);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeMillisecond extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'millisecond';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Integer';
			this.description = 'Return the millisecond component of a Datetime in the local time zone of the context user.';
		}
		public override void execute() {
			this.outputValue.integerValue = ((Datetime)inputValue.datetimeValue).millisecond(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeMillisecondGmt extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'millisecondGmt';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Integer';
			this.description = 'Return the millisecond component of a Datetime in the GMT time zone.';
		}
		public override void execute() {
			this.outputValue.integerValue = ((Datetime)inputValue.datetimeValue).millisecondGmt(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeMinute extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'minute';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Integer';
			this.description = 'Returns the minute component of a Datetime in the local time zone of the context user.';
		}
		public override void execute() {
			this.outputValue.integerValue = ((Datetime)inputValue.datetimeValue).minute(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeMinuteGmt extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'minuteGmt';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Integer';
			this.description = 'Returns the minute component of a Datetime in the GMT time zone.';
		}
		public override void execute() {
			this.outputValue.integerValue = ((Datetime)inputValue.datetimeValue).minuteGmt(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeMonth extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'month';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Integer';
			this.description = 'Returns the month component of a Datetime in the local time zone of the context user (1=Jan).';
		}
		public override void execute() {
			this.outputValue.integerValue = ((Datetime)inputValue.datetimeValue).month(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeMonthGmt extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'monthGmt';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Integer';
			this.description = 'Returns the month component of a Datetime in the GMT time zone (1=Jan).';
		}
		public override void execute() {
			this.outputValue.integerValue = ((Datetime)inputValue.datetimeValue).monthGmt(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeNewInstance extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'newInstance';
			this.isStatic = true;
			this.inputType = 'Datetime';
			this.outputType = 'Datetime';
			this.description = 'Constructs a Datetime and initializes it to represent the specified number of milliseconds since January 1, 1970, 00:00:00 GMT.';
			this.addParameter('milliseconds', 'Long', '');
		}
		public override void execute() {
			Long milliseconds = (Long)getParameter('milliseconds').value.longValue;
			this.outputValue.datetimeValue = Datetime.newInstance(
				milliseconds
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetime2NewInstance extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'newInstance';
			this.isStatic = true;
			this.inputType = 'Datetime';
			this.outputType = 'Datetime';
			this.description = 'Constructs a DateTime from the specified date and time in the local time zone.';
			this.addParameter('date', 'Date', '');
			this.addParameter('time', 'Time', '');
		}
		public override void execute() {
			Date xdate = (Date)getParameter('date').value.dateValue;
			Time xtime = (Time)getParameter('time').value.timeValue;
			this.outputValue.datetimeValue = Datetime.newInstance(
				xdate,
				xtime
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetime3NewInstance extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'newInstance';
			this.isStatic = true;
			this.inputType = 'Datetime';
			this.outputType = 'Datetime';
			this.description = 'Constructs a Datetime from Integer representations of the specified year, month (1=Jan), and day at midnight in the local time zone.';
			this.addParameter('year', 'Integer', '');
			this.addParameter('month', 'Integer', '');
			this.addParameter('day', 'Integer', '');
		}
		public override void execute() {
			Integer year = (Integer)getParameter('year').value.integerValue;
			Integer month = (Integer)getParameter('month').value.integerValue;
			Integer day = (Integer)getParameter('day').value.integerValue;
			this.outputValue.datetimeValue = Datetime.newInstance(
				year,
				month,
				day
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetime4NewInstance extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'newInstance';
			this.isStatic = true;
			this.inputType = 'Datetime';
			this.outputType = 'Datetime';
			this.description = 'Constructs a Datetime from Integer representations of the specified year, month (1=Jan), day, hour, minute, and second in the local time zone.';
			this.addParameter('year', 'Integer', '');
			this.addParameter('month', 'Integer', '');
			this.addParameter('day', 'Integer', '');
			this.addParameter('hour', 'Integer', '');
			this.addParameter('minute', 'Integer', '');
			this.addParameter('second', 'Integer', '');
		}
		public override void execute() {
			Integer year = (Integer)getParameter('year').value.integerValue;
			Integer month = (Integer)getParameter('month').value.integerValue;
			Integer day = (Integer)getParameter('day').value.integerValue;
			Integer hour = (Integer)getParameter('hour').value.integerValue;
			Integer minute = (Integer)getParameter('minute').value.integerValue;
			Integer second = (Integer)getParameter('second').value.integerValue;
			this.outputValue.datetimeValue = Datetime.newInstance(
				year,
				month,
				day,
				hour,
				minute,
				second
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeNewInstanceGmt extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'newInstanceGmt';
			this.isStatic = true;
			this.inputType = 'Datetime';
			this.outputType = 'Datetime';
			this.description = 'Constructs a DateTime from the specified date and time in the GMT time zone. ';
			this.addParameter('date', 'Date', '');
			this.addParameter('time', 'Time', '');
		}
		public override void execute() {
			Date xdate = (Date)getParameter('date').value.dateValue;
			Time xtime = (Time)getParameter('time').value.timeValue;
			this.outputValue.datetimeValue = Datetime.newInstanceGmt(
				xdate,
				xtime
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetime2NewInstanceGmt extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'newInstanceGmt';
			this.isStatic = true;
			this.inputType = 'Datetime';
			this.outputType = 'Datetime';
			this.description = 'Constructs a Datetime from Integer representations of the specified year, month (1=Jan), and day at midnight in the GMT time zone';
			this.addParameter('year', 'Integer', '');
			this.addParameter('month', 'Integer', '');
			this.addParameter('date', 'Integer', '');
		}
		public override void execute() {
			Integer year = (Integer)getParameter('year').value.integerValue;
			Integer month = (Integer)getParameter('month').value.integerValue;
			Integer xdate = (Integer)getParameter('date').value.integerValue;
			this.outputValue.datetimeValue = Datetime.newInstanceGmt(
				year,
				month,
				xdate
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetime3NewInstanceGmt extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'newInstanceGmt';
			this.isStatic = true;
			this.inputType = 'Datetime';
			this.outputType = 'Datetime';
			this.description = 'Constructs a Datetime from Integer representations of the specified year, month (1=Jan), day, hour, minute, and second in the GMT time zone';
			this.addParameter('year', 'Integer', '');
			this.addParameter('month', 'Integer', '');
			this.addParameter('date', 'Integer', '');
			this.addParameter('hour', 'Integer', '');
			this.addParameter('minute', 'Integer', '');
			this.addParameter('second', 'Integer', '');
		}
		public override void execute() {
			Integer year = (Integer)getParameter('year').value.integerValue;
			Integer month = (Integer)getParameter('month').value.integerValue;
			Integer xdate = (Integer)getParameter('date').value.integerValue;
			Integer hour = (Integer)getParameter('hour').value.integerValue;
			Integer minute = (Integer)getParameter('minute').value.integerValue;
			Integer second = (Integer)getParameter('second').value.integerValue;
			this.outputValue.datetimeValue = Datetime.newInstanceGmt(
				year,
				month,
				xdate,
				hour,
				minute,
				second
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeNow extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'now';
			this.isStatic = true;
			this.inputType = 'Datetime';
			this.outputType = 'Datetime';
			this.description = 'Returns the current Datetime based on a GMT calendar. ';
		}
		public override void execute() {
			this.outputValue.datetimeValue = Datetime.now(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeParse extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'parse';
			this.isStatic = true;
			this.inputType = 'Datetime';
			this.outputType = 'Datetime';
			this.description = 'Constructs a Datetime from the given String in the local time zone and in the format of the user locale. ';
			this.addParameter('datetimeString', 'String', '');
		}
		public override void execute() {
			String datetimeString = (String)getParameter('datetimeString').value.stringValue;
			this.outputValue.datetimeValue = Datetime.parse(
				datetimeString
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeSecond extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'second';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Integer';
			this.description = 'Returns the second component of a Datetime in the local time zone of the context user.';
		}
		public override void execute() {
			this.outputValue.integerValue = ((Datetime)inputValue.datetimeValue).second(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeSecondGmt extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'secondGmt';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Integer';
			this.description = 'Returns the second component of a Datetime in the GMT time zone.';
		}
		public override void execute() {
			this.outputValue.integerValue = ((Datetime)inputValue.datetimeValue).secondGmt(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeTime extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'time';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Time';
			this.description = 'Returns the time component of a Datetime in the local time zone of the context user.';
		}
		public override void execute() {
			this.outputValue.timeValue = ((Datetime)inputValue.datetimeValue).time(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeTimeGmt extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'timeGmt';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Time';
			this.description = 'Returns the time component of a Datetime in the GMT time zone.';
		}
		public override void execute() {
			this.outputValue.timeValue = ((Datetime)inputValue.datetimeValue).timeGmt(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeValueOf extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'valueOf';
			this.isStatic = true;
			this.inputType = 'Datetime';
			this.outputType = 'Datetime';
			this.description = 'Returns a Datetime that contains the value of the specified string.';
			this.addParameter('dateTimeString', 'String', '');
		}
		public override void execute() {
			String dateTimeString = (String)getParameter('dateTimeString').value.stringValue;
			this.outputValue.datetimeValue = Datetime.valueOf(
				dateTimeString
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetime2ValueOf extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'valueOf';
			this.isStatic = true;
			this.inputType = 'Datetime';
			this.outputType = 'Datetime';
			this.description = 'Converts the specified object to a Datetime. Use this method to convert a history tracking field value or an object that represents a Datetime value.';
			this.addParameter('fieldValue', 'Object', '');
		}
		public override void execute() {
			Object fieldValue = (Object)getParameter('fieldValue').value.objectValue;
			this.outputValue.datetimeValue = Datetime.valueOf(
				fieldValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeValueOfGmt extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'valueOfGmt';
			this.isStatic = true;
			this.inputType = 'Datetime';
			this.outputType = 'Datetime';
			this.description = 'Returns a Datetime that contains the value of the specified String.';
			this.addParameter('dateTimeString', 'String', '');
		}
		public override void execute() {
			String dateTimeString = (String)getParameter('dateTimeString').value.stringValue;
			this.outputValue.datetimeValue = Datetime.valueOfGmt(
				dateTimeString
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeYear extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'year';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Integer';
			this.description = 'Returns the year component of a Datetime in the local time zone of the context user.';
		}
		public override void execute() {
			this.outputValue.integerValue = ((Datetime)inputValue.datetimeValue).year(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemDatetimeYearGmt extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Datetime';
			this.methodName = 'yearGmt';
			this.isStatic = false;
			this.inputType = 'Datetime';
			this.outputType = 'Integer';
			this.description = 'Returns the year component of a Datetime in the GMT time zone.';
		}
		public override void execute() {
			this.outputValue.integerValue = ((Datetime)inputValue.datetimeValue).yearGmt(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemLabelGet extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Label';
			this.methodName = 'get';
			this.isStatic = true;
			this.inputType = 'Label';
			this.outputType = 'String';
			this.description = 'Retrieve a custom label for the specified namespace and a default language setting.';
			this.addParameter('namespace', 'String', '');
			this.addParameter('label', 'String', '');
		}
		public override void execute() {
			String namespace = (String)getParameter('namespace').value.stringValue;
			String xlabel = (String)getParameter('label').value.stringValue;
			this.outputValue.stringValue = Label.get(
				namespace,
				xlabel
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemLabelTranslationExists extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Label';
			this.methodName = 'translationExists';
			this.isStatic = true;
			this.inputType = 'Label';
			this.outputType = 'Boolean';
			this.description = 'Check if translation exists for a label and language in a namespace.';
			this.addParameter('namespace', 'String', '');
			this.addParameter('label', 'String', '');
			this.addParameter('language', 'String', '');
		}
		public override void execute() {
			String namespace = (String)getParameter('namespace').value.stringValue;
			String xlabel = (String)getParameter('label').value.stringValue;
			String language = (String)getParameter('language').value.stringValue;
			this.outputValue.booleanValue = Label.translationExists(
				namespace,
				xlabel,
				language
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathAbs extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'abs';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Decimal';
			this.description = 'Returns the absolute value of the specified Decimal.';
			this.addParameter('decimalValue', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalValue = (Decimal)getParameter('decimalValue').value.decimalValue;
			this.outputValue.decimalValue = Math.abs(
				decimalValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Abs extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'abs';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns the absolute value of the specified Double.';
			this.addParameter('doubleValue', 'Double', '');
		}
		public override void execute() {
			Double doubleValue = (Double)getParameter('doubleValue').value.doubleValue;
			this.outputValue.doubleValue = Math.abs(
				doubleValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath3Abs extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'abs';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Integer';
			this.description = 'Returns the absolute value of the specified Integer.';
			this.addParameter('integerValue', 'Integer', '');
		}
		public override void execute() {
			Integer integerValue = (Integer)getParameter('integerValue').value.integerValue;
			this.outputValue.integerValue = Math.abs(
				integerValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath4Abs extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'abs';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Long';
			this.description = 'Returns the absolute value of the specified Long.';
			this.addParameter('longValue', 'Long', '');
		}
		public override void execute() {
			Long longValue = (Long)getParameter('longValue').value.longValue;
			this.outputValue.longValue = Math.abs(
				longValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathAcos extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'acos';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Decimal';
			this.description = 'Returns the arc cosine of an angle, in the range of 0.0 through ';
			this.addParameter('decimalAngle', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalAngle = (Decimal)getParameter('decimalAngle').value.decimalValue;
			this.outputValue.decimalValue = Math.acos(
				decimalAngle
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Acos extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'acos';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns the arc cosine of an angle, in the range of 0.0 through ';
			this.addParameter('doubleAngle', 'Double', '');
		}
		public override void execute() {
			Double doubleAngle = (Double)getParameter('doubleAngle').value.doubleValue;
			this.outputValue.doubleValue = Math.acos(
				doubleAngle
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathAsin extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'asin';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Decimal';
			this.description = 'Returns the arc sine of an angle, in the range of -';
			this.addParameter('decimalAngle', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalAngle = (Decimal)getParameter('decimalAngle').value.decimalValue;
			this.outputValue.decimalValue = Math.asin(
				decimalAngle
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Asin extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'asin';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns the arc sine of an angle, in the range of -';
			this.addParameter('doubleAngle', 'Double', '');
		}
		public override void execute() {
			Double doubleAngle = (Double)getParameter('doubleAngle').value.doubleValue;
			this.outputValue.doubleValue = Math.asin(
				doubleAngle
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathAtan extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'atan';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Decimal';
			this.description = 'Returns the arc tangent of an angle, in the range of -';
			this.addParameter('decimalAngle', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalAngle = (Decimal)getParameter('decimalAngle').value.decimalValue;
			this.outputValue.decimalValue = Math.atan(
				decimalAngle
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Atan extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'atan';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns the arc tangent of an angle, in the range of -';
			this.addParameter('doubleAngle', 'Double', '');
		}
		public override void execute() {
			Double doubleAngle = (Double)getParameter('doubleAngle').value.doubleValue;
			this.outputValue.doubleValue = Math.atan(
				doubleAngle
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathAtan2 extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'atan2';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Decimal';
			this.description = 'Converts rectangular coordinates (';
			this.addParameter('xCoordinate', 'Decimal', '');
			this.addParameter('yCoordinate', 'Decimal', '');
		}
		public override void execute() {
			Decimal xCoordinate = (Decimal)getParameter('xCoordinate').value.decimalValue;
			Decimal yCoordinate = (Decimal)getParameter('yCoordinate').value.decimalValue;
			this.outputValue.decimalValue = Math.atan2(
				xCoordinate,
				yCoordinate
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Atan2 extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'atan2';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Converts rectangular coordinates (';
			this.addParameter('xCoordinate', 'Double', '');
			this.addParameter('yCoordinate', 'Double', '');
		}
		public override void execute() {
			Double xCoordinate = (Double)getParameter('xCoordinate').value.doubleValue;
			Double yCoordinate = (Double)getParameter('yCoordinate').value.doubleValue;
			this.outputValue.doubleValue = Math.atan2(
				xCoordinate,
				yCoordinate
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathCbrt extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'cbrt';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Decimal';
			this.description = 'Returns the cube root of the specified Decimal. The cube root of a negative value is the negative of the cube root of that value&#39;s magnitude.';
			this.addParameter('decimalValue', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalValue = (Decimal)getParameter('decimalValue').value.decimalValue;
			this.outputValue.decimalValue = Math.cbrt(
				decimalValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Cbrt extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'cbrt';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns the cube root of the specified Double. The cube root of a negative value is the negative of the cube root of that value&#39;s magnitude.';
			this.addParameter('doubleValue', 'Double', '');
		}
		public override void execute() {
			Double doubleValue = (Double)getParameter('doubleValue').value.doubleValue;
			this.outputValue.doubleValue = Math.cbrt(
				doubleValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathCeil extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'ceil';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Decimal';
			this.description = 'Returns the smallest (closest to negative infinity) Decimal that is not less than the argument and is equal to a mathematical integer.';
			this.addParameter('decimalValue', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalValue = (Decimal)getParameter('decimalValue').value.decimalValue;
			this.outputValue.decimalValue = Math.ceil(
				decimalValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Ceil extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'ceil';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns the smallest (closest to negative infinity) Double that is not less than the argument and is equal to a mathematical integer.';
			this.addParameter('doubleValue', 'Double', '');
		}
		public override void execute() {
			Double doubleValue = (Double)getParameter('doubleValue').value.doubleValue;
			this.outputValue.doubleValue = Math.ceil(
				doubleValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathCos extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'cos';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Decimal';
			this.description = 'Returns the trigonometric cosine of the angle specified by ';
			this.addParameter('decimalAngle', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalAngle = (Decimal)getParameter('decimalAngle').value.decimalValue;
			this.outputValue.decimalValue = Math.cos(
				decimalAngle
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Cos extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'cos';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns the trigonometric cosine of the angle specified by ';
			this.addParameter('doubleAngle', 'Double', '');
		}
		public override void execute() {
			Double doubleAngle = (Double)getParameter('doubleAngle').value.doubleValue;
			this.outputValue.doubleValue = Math.cos(
				doubleAngle
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathCosh extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'cosh';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Decimal';
			this.description = 'Returns the hyperbolic cosine of ';
			this.addParameter('decimalAngle', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalAngle = (Decimal)getParameter('decimalAngle').value.decimalValue;
			this.outputValue.decimalValue = Math.cosh(
				decimalAngle
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Cosh extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'cosh';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns the hyperbolic cosine of ';
			this.addParameter('doubleAngle', 'Double', '');
		}
		public override void execute() {
			Double doubleAngle = (Double)getParameter('doubleAngle').value.doubleValue;
			this.outputValue.doubleValue = Math.cosh(
				doubleAngle
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathExp extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'exp';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Decimal';
			this.description = 'Returns Euler&#39;s number ';
			this.addParameter('exponentDecimal', 'Decimal', '');
		}
		public override void execute() {
			Decimal exponentDecimal = (Decimal)getParameter('exponentDecimal').value.decimalValue;
			this.outputValue.decimalValue = Math.exp(
				exponentDecimal
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Exp extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'exp';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns Euler&#39;s number ';
			this.addParameter('exponentDouble', 'Double', '');
		}
		public override void execute() {
			Double exponentDouble = (Double)getParameter('exponentDouble').value.doubleValue;
			this.outputValue.doubleValue = Math.exp(
				exponentDouble
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathFloor extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'floor';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Decimal';
			this.description = 'Returns the largest (closest to positive infinity) Decimal that is not greater than the argument and is equal to a mathematical integer.';
			this.addParameter('decimalValue', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalValue = (Decimal)getParameter('decimalValue').value.decimalValue;
			this.outputValue.decimalValue = Math.floor(
				decimalValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Floor extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'floor';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns the largest (closest to positive infinity) Double that is not greater than the argument and is equal to a mathematical integer.';
			this.addParameter('doubleValue', 'Double', '');
		}
		public override void execute() {
			Double doubleValue = (Double)getParameter('doubleValue').value.doubleValue;
			this.outputValue.doubleValue = Math.floor(
				doubleValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathLog extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'log';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Decimal';
			this.description = 'Returns the natural logarithm (base ';
			this.addParameter('decimalValue', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalValue = (Decimal)getParameter('decimalValue').value.decimalValue;
			this.outputValue.decimalValue = Math.log(
				decimalValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Log extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'log';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns the natural logarithm (base ';
			this.addParameter('doubleValue', 'Double', '');
		}
		public override void execute() {
			Double doubleValue = (Double)getParameter('doubleValue').value.doubleValue;
			this.outputValue.doubleValue = Math.log(
				doubleValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathLog10 extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'log10';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Decimal';
			this.description = 'Returns the logarithm (base ';
			this.addParameter('decimalValue', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalValue = (Decimal)getParameter('decimalValue').value.decimalValue;
			this.outputValue.decimalValue = Math.log10(
				decimalValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Log10 extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'log10';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns the logarithm (base ';
			this.addParameter('doubleValue', 'Double', '');
		}
		public override void execute() {
			Double doubleValue = (Double)getParameter('doubleValue').value.doubleValue;
			this.outputValue.doubleValue = Math.log10(
				doubleValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathMax extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'max';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Decimal';
			this.description = 'Returns the larger of the two specified Decimals.';
			this.addParameter('decimalValue1', 'Decimal', '');
			this.addParameter('decimalValue2', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalValue1 = (Decimal)getParameter('decimalValue1').value.decimalValue;
			Decimal decimalValue2 = (Decimal)getParameter('decimalValue2').value.decimalValue;
			this.outputValue.decimalValue = Math.max(
				decimalValue1,
				decimalValue2
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Max extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'max';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns the larger of the two specified Doubles.';
			this.addParameter('doubleValue1', 'Double', '');
			this.addParameter('doubleValue2', 'Double', '');
		}
		public override void execute() {
			Double doubleValue1 = (Double)getParameter('doubleValue1').value.doubleValue;
			Double doubleValue2 = (Double)getParameter('doubleValue2').value.doubleValue;
			this.outputValue.doubleValue = Math.max(
				doubleValue1,
				doubleValue2
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath3Max extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'max';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Integer';
			this.description = 'Returns the larger of the two specified Integers.';
			this.addParameter('integerValue1', 'Integer', '');
			this.addParameter('integerValue2', 'Integer', '');
		}
		public override void execute() {
			Integer integerValue1 = (Integer)getParameter('integerValue1').value.integerValue;
			Integer integerValue2 = (Integer)getParameter('integerValue2').value.integerValue;
			this.outputValue.integerValue = Math.max(
				integerValue1,
				integerValue2
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath4Max extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'max';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Long';
			this.description = 'Returns the larger of the two specified Longs.';
			this.addParameter('longValue1', 'Long', '');
			this.addParameter('longValue2', 'Long', '');
		}
		public override void execute() {
			Long longValue1 = (Long)getParameter('longValue1').value.longValue;
			Long longValue2 = (Long)getParameter('longValue2').value.longValue;
			this.outputValue.longValue = Math.max(
				longValue1,
				longValue2
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathMin extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'min';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Decimal';
			this.description = 'Returns the smaller of the two specified Decimals.';
			this.addParameter('decimalValue1', 'Decimal', '');
			this.addParameter('decimalValue2', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalValue1 = (Decimal)getParameter('decimalValue1').value.decimalValue;
			Decimal decimalValue2 = (Decimal)getParameter('decimalValue2').value.decimalValue;
			this.outputValue.decimalValue = Math.min(
				decimalValue1,
				decimalValue2
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Min extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'min';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns the smaller of the two specified Doubles.';
			this.addParameter('doubleValue1', 'Double', '');
			this.addParameter('doubleValue2', 'Double', '');
		}
		public override void execute() {
			Double doubleValue1 = (Double)getParameter('doubleValue1').value.doubleValue;
			Double doubleValue2 = (Double)getParameter('doubleValue2').value.doubleValue;
			this.outputValue.doubleValue = Math.min(
				doubleValue1,
				doubleValue2
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath3Min extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'min';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Integer';
			this.description = 'Returns the smaller of the two specified Integers.';
			this.addParameter('integerValue1', 'Integer', '');
			this.addParameter('integerValue2', 'Integer', '');
		}
		public override void execute() {
			Integer integerValue1 = (Integer)getParameter('integerValue1').value.integerValue;
			Integer integerValue2 = (Integer)getParameter('integerValue2').value.integerValue;
			this.outputValue.integerValue = Math.min(
				integerValue1,
				integerValue2
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath4Min extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'min';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Long';
			this.description = 'Returns the smaller of the two specified Longs.';
			this.addParameter('longValue1', 'Long', '');
			this.addParameter('longValue2', 'Long', '');
		}
		public override void execute() {
			Long longValue1 = (Long)getParameter('longValue1').value.longValue;
			Long longValue2 = (Long)getParameter('longValue2').value.longValue;
			this.outputValue.longValue = Math.min(
				longValue1,
				longValue2
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathMod extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'mod';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Integer';
			this.description = 'Returns the remainder of ';
			this.addParameter('integerValue1', 'Integer', '');
			this.addParameter('integerValue2', 'Integer', '');
		}
		public override void execute() {
			Integer integerValue1 = (Integer)getParameter('integerValue1').value.integerValue;
			Integer integerValue2 = (Integer)getParameter('integerValue2').value.integerValue;
			this.outputValue.integerValue = Math.mod(
				integerValue1,
				integerValue2
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Mod extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'mod';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Long';
			this.description = 'Returns the remainder of ';
			this.addParameter('longValue1', 'Long', '');
			this.addParameter('longValue2', 'Long', '');
		}
		public override void execute() {
			Long longValue1 = (Long)getParameter('longValue1').value.longValue;
			Long longValue2 = (Long)getParameter('longValue2').value.longValue;
			this.outputValue.longValue = Math.mod(
				longValue1,
				longValue2
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathPow extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'pow';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns the value of the first Double raised to the power of ';
			this.addParameter('doubleValue', 'Double', '');
			this.addParameter('exponent', 'Double', '');
		}
		public override void execute() {
			Double doubleValue = (Double)getParameter('doubleValue').value.doubleValue;
			Double exponent = (Double)getParameter('exponent').value.doubleValue;
			this.outputValue.doubleValue = Math.pow(
				doubleValue,
				exponent
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathRandom extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'random';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns a positive Double that is greater than or equal to 0.0 and less than 1.0.';
		}
		public override void execute() {
			this.outputValue.doubleValue = Math.random(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathRint extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'rint';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Decimal';
			this.description = 'Returns the value that is closest in value to ';
			this.addParameter('decimalValue', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalValue = (Decimal)getParameter('decimalValue').value.decimalValue;
			this.outputValue.decimalValue = Math.rint(
				decimalValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Rint extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'rint';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns the value that is closest in value to ';
			this.addParameter('doubleValue', 'Double', '');
		}
		public override void execute() {
			Double doubleValue = (Double)getParameter('doubleValue').value.doubleValue;
			this.outputValue.doubleValue = Math.rint(
				doubleValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathRound extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'round';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Integer';
			this.description = 'Do not use. This method is deprecated as of the Winter &#39;08 release. Instead, use ';
			this.addParameter('doubleValue', 'Double', '');
		}
		public override void execute() {
			Double doubleValue = (Double)getParameter('doubleValue').value.doubleValue;
			this.outputValue.integerValue = Math.round(
				doubleValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Round extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'round';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Integer';
			this.description = 'Returns the rounded approximation of this Decimal. The number is rounded to zero decimal places using half-even rounding mode, that is, it rounds towards the “nearest neighbor” unless both neighbors are equidistant, in which case, this mode rounds towards the even neighbor. ';
			this.addParameter('decimalValue', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalValue = (Decimal)getParameter('decimalValue').value.decimalValue;
			this.outputValue.integerValue = Math.round(
				decimalValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathRoundToLong extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'roundToLong';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Long';
			this.description = 'Returns the rounded approximation of this Decimal. The number is rounded to zero decimal places using half-even rounding mode, that is, it rounds towards the “nearest neighbor” unless both neighbors are equidistant, in which case, this mode rounds towards the even neighbor. ';
			this.addParameter('decimalValue', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalValue = (Decimal)getParameter('decimalValue').value.decimalValue;
			this.outputValue.longValue = Math.roundToLong(
				decimalValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2RoundToLong extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'roundToLong';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Long';
			this.description = 'Returns the closest Long to the specified Double.';
			this.addParameter('doubleValue', 'Double', '');
		}
		public override void execute() {
			Double doubleValue = (Double)getParameter('doubleValue').value.doubleValue;
			this.outputValue.longValue = Math.roundToLong(
				doubleValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathSignum extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'signum';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Decimal';
			this.description = 'Returns the signum function of the specified Decimal, which is 0 if ';
			this.addParameter('decimalValue', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalValue = (Decimal)getParameter('decimalValue').value.decimalValue;
			this.outputValue.decimalValue = Math.signum(
				decimalValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Signum extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'signum';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns the signum function of the specified Double, which is 0 if ';
			this.addParameter('doubleValue', 'Double', '');
		}
		public override void execute() {
			Double doubleValue = (Double)getParameter('doubleValue').value.doubleValue;
			this.outputValue.doubleValue = Math.signum(
				doubleValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathSin extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'sin';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Decimal';
			this.description = 'Returns the trigonometric sine of the angle specified by ';
			this.addParameter('decimalAngle', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalAngle = (Decimal)getParameter('decimalAngle').value.decimalValue;
			this.outputValue.decimalValue = Math.sin(
				decimalAngle
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Sin extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'sin';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns the trigonometric sine of the angle specified by ';
			this.addParameter('doubleAngle', 'Double', '');
		}
		public override void execute() {
			Double doubleAngle = (Double)getParameter('doubleAngle').value.doubleValue;
			this.outputValue.doubleValue = Math.sin(
				doubleAngle
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathSinh extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'sinh';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Decimal';
			this.description = 'Returns the hyperbolic sine of ';
			this.addParameter('decimalAngle', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalAngle = (Decimal)getParameter('decimalAngle').value.decimalValue;
			this.outputValue.decimalValue = Math.sinh(
				decimalAngle
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Sinh extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'sinh';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns the hyperbolic sine of ';
			this.addParameter('doubleAngle', 'Double', '');
		}
		public override void execute() {
			Double doubleAngle = (Double)getParameter('doubleAngle').value.doubleValue;
			this.outputValue.doubleValue = Math.sinh(
				doubleAngle
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathSqrt extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'sqrt';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Decimal';
			this.description = 'Returns the correctly rounded positive square root of ';
			this.addParameter('decimalValue', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalValue = (Decimal)getParameter('decimalValue').value.decimalValue;
			this.outputValue.decimalValue = Math.sqrt(
				decimalValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Sqrt extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'sqrt';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns the correctly rounded positive square root of ';
			this.addParameter('doubleValue', 'Double', '');
		}
		public override void execute() {
			Double doubleValue = (Double)getParameter('doubleValue').value.doubleValue;
			this.outputValue.doubleValue = Math.sqrt(
				doubleValue
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathTan extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'tan';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Decimal';
			this.description = 'Returns the trigonometric tangent of the angle specified by ';
			this.addParameter('decimalAngle', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalAngle = (Decimal)getParameter('decimalAngle').value.decimalValue;
			this.outputValue.decimalValue = Math.tan(
				decimalAngle
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Tan extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'tan';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns the trigonometric tangent of the angle specified by ';
			this.addParameter('doubleAngle', 'Double', '');
		}
		public override void execute() {
			Double doubleAngle = (Double)getParameter('doubleAngle').value.doubleValue;
			this.outputValue.doubleValue = Math.tan(
				doubleAngle
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMathTanh extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'tanh';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Decimal';
			this.description = 'Returns the hyperbolic tangent of ';
			this.addParameter('decimalAngle', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalAngle = (Decimal)getParameter('decimalAngle').value.decimalValue;
			this.outputValue.decimalValue = Math.tanh(
				decimalAngle
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemMath2Tanh extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'Math';
			this.methodName = 'tanh';
			this.isStatic = true;
			this.inputType = 'Math';
			this.outputType = 'Double';
			this.description = 'Returns the hyperbolic tangent of ';
			this.addParameter('doubleAngle', 'Double', '');
		}
		public override void execute() {
			Double doubleAngle = (Double)getParameter('doubleAngle').value.doubleValue;
			this.outputValue.doubleValue = Math.tanh(
				doubleAngle
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringAbbreviate extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'abbreviate';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns an abbreviated version of the String, of the specified length and with ellipses appended if the current String is longer than the specified length; otherwise, returns the original String without ellipses.';
			this.addParameter('maxWidth', 'Integer', '');
		}
		public override void execute() {
			Integer maxWidth = (Integer)getParameter('maxWidth').value.integerValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).abbreviate(
				maxWidth);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemString2Abbreviate extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'abbreviate';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns an abbreviated version of the String, starting at the specified character offset and of the specified length. The returned String has ellipses appended at the start and the end if characters have been removed at these locations.';
			this.addParameter('maxWidth', 'Integer', '');
			this.addParameter('offset', 'Integer', '');
		}
		public override void execute() {
			Integer maxWidth = (Integer)getParameter('maxWidth').value.integerValue;
			Integer offset = (Integer)getParameter('offset').value.integerValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).abbreviate(
				maxWidth,offset);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringCapitalize extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'capitalize';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns the current String with the first letter changed to title case.';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).capitalize(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringCenter extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'center';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a version of the current String of the specified size padded with spaces on the left and right, so that it appears in the center. If the specified size is smaller than the current String size, the entire String is returned without added spaces.';
			this.addParameter('size', 'Integer', '');
		}
		public override void execute() {
			Integer size = (Integer)getParameter('size').value.integerValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).center(
				size);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemString2Center extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'center';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a version of the current String of the specified size padded with the specified String on the left and right, so that it appears in the center. If the specified size is smaller than the current String size, the entire String is returned without padding.';
			this.addParameter('size', 'Integer', '');
			this.addParameter('paddingString', 'String', '');
		}
		public override void execute() {
			Integer size = (Integer)getParameter('size').value.integerValue;
			String paddingString = (String)getParameter('paddingString').value.stringValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).center(
				size,paddingString);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringCharAt extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'charAt';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = '';
			this.addParameter('index', 'Integer', '');
		}
		public override void execute() {
			Integer index = (Integer)getParameter('index').value.integerValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).charAt(
				index);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringCodePointAt extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'codePointAt';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = '';
			this.addParameter('index', 'Integer', '');
		}
		public override void execute() {
			Integer index = (Integer)getParameter('index').value.integerValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).codePointAt(
				index);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringCodePointBefore extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'codePointBefore';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = '';
			this.addParameter('index', 'Integer', '');
		}
		public override void execute() {
			Integer index = (Integer)getParameter('index').value.integerValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).codePointBefore(
				index);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringCodePointCount extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'codePointCount';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = '';
			this.addParameter('beginIndex', 'Integer', '');
			this.addParameter('endIndex', 'Integer', '');
		}
		public override void execute() {
			Integer beginIndex = (Integer)getParameter('beginIndex').value.integerValue;
			Integer endIndex = (Integer)getParameter('endIndex').value.integerValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).codePointCount(
				beginIndex,endIndex);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringCompareTo extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'compareTo';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = 'Compares two strings lexicographically, based on the Unicode value of each character in the Strings.';
			this.addParameter('secondString', 'String', '');
		}
		public override void execute() {
			String secondString = (String)getParameter('secondString').value.stringValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).compareTo(
				secondString);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringContains extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'contains';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
			this.addParameter('substring', 'String', '');
		}
		public override void execute() {
			String substring = (String)getParameter('substring').value.stringValue;
			this.outputValue.booleanValue = ((String)inputValue.stringValue).contains(
				substring);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringContainsAny extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'containsAny';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
			this.addParameter('inputString', 'String', '');
		}
		public override void execute() {
			String inputString = (String)getParameter('inputString').value.stringValue;
			this.outputValue.booleanValue = ((String)inputValue.stringValue).containsAny(
				inputString);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringContainsIgnoreCase extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'containsIgnoreCase';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
			this.addParameter('substring', 'String', '');
		}
		public override void execute() {
			String substring = (String)getParameter('substring').value.stringValue;
			this.outputValue.booleanValue = ((String)inputValue.stringValue).containsIgnoreCase(
				substring);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringContainsNone extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'containsNone';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
			this.addParameter('inputString', 'String', '');
		}
		public override void execute() {
			String inputString = (String)getParameter('inputString').value.stringValue;
			this.outputValue.booleanValue = ((String)inputValue.stringValue).containsNone(
				inputString);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringContainsOnly extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'containsOnly';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
			this.addParameter('inputString', 'String', '');
		}
		public override void execute() {
			String inputString = (String)getParameter('inputString').value.stringValue;
			this.outputValue.booleanValue = ((String)inputValue.stringValue).containsOnly(
				inputString);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringContainsWhitespace extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'containsWhitespace';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
		}
		public override void execute() {
			this.outputValue.booleanValue = ((String)inputValue.stringValue).containsWhitespace(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringCountMatches extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'countMatches';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = 'Returns the number of times the specified substring occurs in the current String.';
			this.addParameter('substring', 'String', '');
		}
		public override void execute() {
			String substring = (String)getParameter('substring').value.stringValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).countMatches(
				substring);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringDeleteWhitespace extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'deleteWhitespace';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a version of the current String with all white space characters removed.';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).deleteWhitespace(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringDifference extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'difference';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns the difference between the current String and the specified String.';
			this.addParameter('secondString', 'String', '');
		}
		public override void execute() {
			String secondString = (String)getParameter('secondString').value.stringValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).difference(
				secondString);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringEndsWith extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'endsWith';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
			this.addParameter('suffix', 'String', '');
		}
		public override void execute() {
			String suffix = (String)getParameter('suffix').value.stringValue;
			this.outputValue.booleanValue = ((String)inputValue.stringValue).endsWith(
				suffix);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringEndsWithIgnoreCase extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'endsWithIgnoreCase';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
			this.addParameter('suffix', 'String', '');
		}
		public override void execute() {
			String suffix = (String)getParameter('suffix').value.stringValue;
			this.outputValue.booleanValue = ((String)inputValue.stringValue).endsWithIgnoreCase(
				suffix);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringEquals extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'equals';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Deprecated. This method is replaced by ';
			this.addParameter('secondString', 'String', '');
		}
		public override void execute() {
			String secondString = (String)getParameter('secondString').value.stringValue;
			this.outputValue.booleanValue = ((String)inputValue.stringValue).equals(
				secondString);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemString2Equals extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'equals';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = '';
			this.addParameter('stringOrId', 'Object', '');
		}
		public override void execute() {
			Object stringOrId = (Object)getParameter('stringOrId').value.objectValue;
			this.outputValue.booleanValue = ((String)inputValue.stringValue).equals(
				stringOrId);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringEqualsIgnoreCase extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'equalsIgnoreCase';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
			this.addParameter('secondString', 'String', '');
		}
		public override void execute() {
			String secondString = (String)getParameter('secondString').value.stringValue;
			this.outputValue.booleanValue = ((String)inputValue.stringValue).equalsIgnoreCase(
				secondString);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringEscapeCsv extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'escapeCsv';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a String for a CSV column enclosed in double quotes, if required.';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).escapeCsv(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringEscapeEcmaScript extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'escapeEcmaScript';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Escapes the characters in the String using EcmaScript String rules.';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).escapeEcmaScript(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringEscapeHtml3 extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'escapeHtml3';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Escapes the characters in a String using HTML 3.0 entities.';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).escapeHtml3(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringEscapeHtml4 extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'escapeHtml4';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Escapes the characters in a String using HTML 4.0 entities.';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).escapeHtml4(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringEscapeJava extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'escapeJava';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a String whose characters are escaped using Java String rules. Characters escaped include quotes and control characters, such as tab, backslash, and carriage return characters.';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).escapeJava(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringEscapeSingleQuotes extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'escapeSingleQuotes';
			this.isStatic = true;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a String with the escape character () added before any single quotation marks in the String ';
			this.addParameter('stringToEscape', 'String', '');
		}
		public override void execute() {
			String stringToEscape = (String)getParameter('stringToEscape').value.stringValue;
			this.outputValue.stringValue = String.escapeSingleQuotes(
				stringToEscape
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringEscapeUnicode extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'escapeUnicode';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a String whose Unicode characters are escaped to a Unicode escape sequence.';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).escapeUnicode(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringEscapeXml extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'escapeXml';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Escapes the characters in a String using XML entities.';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).escapeXml(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringFormat extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'format';
			this.isStatic = true;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = ' ';
			this.addParameter('stringToFormat', 'String', '');
			this.addParameter('formattingArguments', 'Object[]', '');
		}
		public override void execute() {
			String stringToFormat = (String)getParameter('stringToFormat').value.stringValue;
			Object[] formattingArguments = (Object[])getParameter('formattingArguments').value.objectListValue;
			this.outputValue.stringValue = String.format(
				stringToFormat,
				formattingArguments
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringFromCharArray extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'fromCharArray';
			this.isStatic = true;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a String from the values of the list of integers. ';
			this.addParameter('charArray', 'Integer[]', '');
		}
		public override void execute() {
			Integer[] charArray = (Integer[])getParameter('charArray').value.integerListValue;
			this.outputValue.stringValue = String.fromCharArray(
				charArray
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringGetChars extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'getChars';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer[]';
			this.description = '';
		}
		public override void execute() {
			this.outputValue.integerListValue = ((String)inputValue.stringValue).getChars(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringGetCommonPrefix extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'getCommonPrefix';
			this.isStatic = true;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns the initial sequence of characters as a String that is common to all the specified Strings.';
			this.addParameter('strings', 'String[]', '');
		}
		public override void execute() {
			String[] strings = (String[])getParameter('strings').value.stringListValue;
			this.outputValue.stringValue = String.getCommonPrefix(
				strings
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringGetLevenshteinDistance extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'getLevenshteinDistance';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = 'Returns the Levenshtein distance between the current String and the specified String.';
			this.addParameter('stringToCompare', 'String', '');
		}
		public override void execute() {
			String stringToCompare = (String)getParameter('stringToCompare').value.stringValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).getLevenshteinDistance(
				stringToCompare);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemString2GetLevenshteinDistance extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'getLevenshteinDistance';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = 'Returns the Levenshtein distance between the current String and the specified String if it is less than or equal than the given threshold; otherwise, returns -1.';
			this.addParameter('stringToCompare', 'String', '');
			this.addParameter('threshold', 'Integer', '');
		}
		public override void execute() {
			String stringToCompare = (String)getParameter('stringToCompare').value.stringValue;
			Integer threshold = (Integer)getParameter('threshold').value.integerValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).getLevenshteinDistance(
				stringToCompare,threshold);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringHashCode extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'hashCode';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = 'Returns a hash code value for this string. ';
		}
		public override void execute() {
			this.outputValue.integerValue = ((String)inputValue.stringValue).hashCode(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringIndexOf extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'indexOf';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = 'Returns the index of the first occurrence of the specified substring. If the substring does not occur, this method returns -1.';
			this.addParameter('substring', 'String', '');
		}
		public override void execute() {
			String substring = (String)getParameter('substring').value.stringValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).indexOf(
				substring);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemString2IndexOf extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'indexOf';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = 'Returns the zero-based index of the first occurrence of the specified substring from the point of the given index. If the substring does not occur, this method returns -1.';
			this.addParameter('substring', 'String', '');
			this.addParameter('index', 'Integer', '');
		}
		public override void execute() {
			String substring = (String)getParameter('substring').value.stringValue;
			Integer index = (Integer)getParameter('index').value.integerValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).indexOf(
				substring,index);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringIndexOfAny extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'indexOfAny';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = 'Returns the zero-based index of the first occurrence of any character specified in the substring. If none of the characters occur, returns -1. ';
			this.addParameter('substring', 'String', '');
		}
		public override void execute() {
			String substring = (String)getParameter('substring').value.stringValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).indexOfAny(
				substring);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringIndexOfAnyBut extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'indexOfAnyBut';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = 'Returns the zero-based index of the first occurrence of a character that is not in the specified substring. Otherwise, returns -1. ';
			this.addParameter('substring', 'String', '');
		}
		public override void execute() {
			String substring = (String)getParameter('substring').value.stringValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).indexOfAnyBut(
				substring);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringIndexOfChar extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'indexOfChar';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = '';
			this.addParameter('character', 'Integer', '');
		}
		public override void execute() {
			Integer character = (Integer)getParameter('character').value.integerValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).indexOfChar(
				character);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemString2IndexOfChar extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'indexOfChar';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = '';
			this.addParameter('character', 'Integer', '');
			this.addParameter('startIndex', 'Integer', '');
		}
		public override void execute() {
			Integer character = (Integer)getParameter('character').value.integerValue;
			Integer startIndex = (Integer)getParameter('startIndex').value.integerValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).indexOfChar(
				character,startIndex);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringIndexOfDifference extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'indexOfDifference';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = 'Returns the zero-based index of the character where the current String begins to differ from the specified String.';
			this.addParameter('stringToCompare', 'String', '');
		}
		public override void execute() {
			String stringToCompare = (String)getParameter('stringToCompare').value.stringValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).indexOfDifference(
				stringToCompare);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringIndexOfIgnoreCase extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'indexOfIgnoreCase';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = 'Returns the zero-based index of the first occurrence of the specified substring without regard to case. If the substring does not occur, this method returns -1.';
			this.addParameter('substring', 'String', '');
		}
		public override void execute() {
			String substring = (String)getParameter('substring').value.stringValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).indexOfIgnoreCase(
				substring);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemString2IndexOfIgnoreCase extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'indexOfIgnoreCase';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = 'Returns the zero-based index of the first occurrence of the specified substring from the point of index ';
			this.addParameter('substring', 'String', '');
			this.addParameter('startPosition', 'Integer', '');
		}
		public override void execute() {
			String substring = (String)getParameter('substring').value.stringValue;
			Integer startPosition = (Integer)getParameter('startPosition').value.integerValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).indexOfIgnoreCase(
				substring,startPosition);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringIsAllLowerCase extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'isAllLowerCase';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
		}
		public override void execute() {
			this.outputValue.booleanValue = ((String)inputValue.stringValue).isAllLowerCase(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringIsAllUpperCase extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'isAllUpperCase';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
		}
		public override void execute() {
			this.outputValue.booleanValue = ((String)inputValue.stringValue).isAllUpperCase(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringIsAlpha extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'isAlpha';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
		}
		public override void execute() {
			this.outputValue.booleanValue = ((String)inputValue.stringValue).isAlpha(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringIsAlphaSpace extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'isAlphaSpace';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
		}
		public override void execute() {
			this.outputValue.booleanValue = ((String)inputValue.stringValue).isAlphaSpace(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringIsAlphanumeric extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'isAlphanumeric';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
		}
		public override void execute() {
			this.outputValue.booleanValue = ((String)inputValue.stringValue).isAlphanumeric(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringIsAlphanumericSpace extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'isAlphanumericSpace';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
		}
		public override void execute() {
			this.outputValue.booleanValue = ((String)inputValue.stringValue).isAlphanumericSpace(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringIsAsciiPrintable extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'isAsciiPrintable';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
		}
		public override void execute() {
			this.outputValue.booleanValue = ((String)inputValue.stringValue).isAsciiPrintable(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringIsBlank extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'isBlank';
			this.isStatic = true;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
			this.addParameter('inputString', 'String', '');
		}
		public override void execute() {
			String inputString = (String)getParameter('inputString').value.stringValue;
			this.outputValue.booleanValue = String.isBlank(
				inputString
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringIsEmpty extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'isEmpty';
			this.isStatic = true;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
			this.addParameter('inputString', 'String', '');
		}
		public override void execute() {
			String inputString = (String)getParameter('inputString').value.stringValue;
			this.outputValue.booleanValue = String.isEmpty(
				inputString
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringIsNotBlank extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'isNotBlank';
			this.isStatic = true;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
			this.addParameter('inputString', 'String', '');
		}
		public override void execute() {
			String inputString = (String)getParameter('inputString').value.stringValue;
			this.outputValue.booleanValue = String.isNotBlank(
				inputString
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringIsNotEmpty extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'isNotEmpty';
			this.isStatic = true;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
			this.addParameter('inputString', 'String', '');
		}
		public override void execute() {
			String inputString = (String)getParameter('inputString').value.stringValue;
			this.outputValue.booleanValue = String.isNotEmpty(
				inputString
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringIsNumeric extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'isNumeric';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
		}
		public override void execute() {
			this.outputValue.booleanValue = ((String)inputValue.stringValue).isNumeric(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringIsNumericSpace extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'isNumericSpace';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
		}
		public override void execute() {
			this.outputValue.booleanValue = ((String)inputValue.stringValue).isNumericSpace(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringIsWhitespace extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'isWhitespace';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
		}
		public override void execute() {
			this.outputValue.booleanValue = ((String)inputValue.stringValue).isWhitespace(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringJoin extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'join';
			this.isStatic = true;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Joins the elements of the specified iterable object, such as a List, into a single String separated by the specified separator.';
			this.addParameter('iterableObj', 'Object[]', '');
			this.addParameter('separator', 'String', '');
		}
		public override void execute() {
			Object[] iterableObj = (Object[])getParameter('iterableObj').value.objectValue;
			String separator = (String)getParameter('separator').value.stringValue;
			this.outputValue.stringValue = String.join(
				iterableObj,
				separator
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringLastIndexOf extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'lastIndexOf';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = 'Returns the index of the last occurrence of the specified substring. If the substring does not occur, this method returns -1.';
			this.addParameter('substring', 'String', '');
		}
		public override void execute() {
			String substring = (String)getParameter('substring').value.stringValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).lastIndexOf(
				substring);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemString2LastIndexOf extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'lastIndexOf';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = 'Returns the index of the last occurrence of the specified substring, starting from the character at index 0 and ending at the specified index. ';
			this.addParameter('substring', 'String', '');
			this.addParameter('endPosition', 'Integer', '');
		}
		public override void execute() {
			String substring = (String)getParameter('substring').value.stringValue;
			Integer endPosition = (Integer)getParameter('endPosition').value.integerValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).lastIndexOf(
				substring,endPosition);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringLastIndexOfChar extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'lastIndexOfChar';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = '';
			this.addParameter('character', 'Integer', '');
		}
		public override void execute() {
			Integer character = (Integer)getParameter('character').value.integerValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).lastIndexOfChar(
				character);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemString2LastIndexOfChar extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'lastIndexOfChar';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = '';
			this.addParameter('character', 'Integer', '');
			this.addParameter('endIndex', 'Integer', '');
		}
		public override void execute() {
			Integer character = (Integer)getParameter('character').value.integerValue;
			Integer endIndex = (Integer)getParameter('endIndex').value.integerValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).lastIndexOfChar(
				character,endIndex);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringLastIndexOfIgnoreCase extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'lastIndexOfIgnoreCase';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = 'Returns the index of the last occurrence of the specified substring regardless of case. ';
			this.addParameter('substring', 'String', '');
		}
		public override void execute() {
			String substring = (String)getParameter('substring').value.stringValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).lastIndexOfIgnoreCase(
				substring);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemString2LastIndexOfIgnoreCase extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'lastIndexOfIgnoreCase';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = 'Returns the index of the last occurrence of the specified substring regardless of case, starting from the character at index 0 and ending at the specified index. ';
			this.addParameter('substring', 'String', '');
			this.addParameter('endPosition', 'Integer', '');
		}
		public override void execute() {
			String substring = (String)getParameter('substring').value.stringValue;
			Integer endPosition = (Integer)getParameter('endPosition').value.integerValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).lastIndexOfIgnoreCase(
				substring,endPosition);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringLeft extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'left';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns the leftmost characters of the current String of the specified length.';
			this.addParameter('length', 'Integer', '');
		}
		public override void execute() {
			Integer length = (Integer)getParameter('length').value.integerValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).left(
				length);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringLeftPad extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'leftPad';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns the current String padded with spaces on the left and of the specified length. ';
			this.addParameter('length', 'Integer', '');
		}
		public override void execute() {
			Integer length = (Integer)getParameter('length').value.integerValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).leftPad(
				length);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringLength extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'length';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = 'Returns the number of 16-bit Unicode characters contained in the String.';
		}
		public override void execute() {
			this.outputValue.integerValue = ((String)inputValue.stringValue).length(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringMid extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'mid';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a new String that begins with the character at the specified zero-based ';
			this.addParameter('startIndex', 'Integer', '');
			this.addParameter('length', 'Integer', '');
		}
		public override void execute() {
			Integer startIndex = (Integer)getParameter('startIndex').value.integerValue;
			Integer length = (Integer)getParameter('length').value.integerValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).mid(
				startIndex,length);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringNormalizeSpace extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'normalizeSpace';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns the current String with leading, trailing, and repeating white space characters removed. ';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).normalizeSpace(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringOffsetByCodePoints extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'offsetByCodePoints';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Integer';
			this.description = '';
			this.addParameter('index', 'Integer', '');
			this.addParameter('codePointOffset', 'Integer', '');
		}
		public override void execute() {
			Integer index = (Integer)getParameter('index').value.integerValue;
			Integer codePointOffset = (Integer)getParameter('codePointOffset').value.integerValue;
			this.outputValue.integerValue = ((String)inputValue.stringValue).offsetByCodePoints(
				index,codePointOffset);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringRemove extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'remove';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Removes all occurrences of the specified substring and returns the String result.';
			this.addParameter('substring', 'String', '');
		}
		public override void execute() {
			String substring = (String)getParameter('substring').value.stringValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).remove(
				substring);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringRemoveEnd extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'removeEnd';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Removes the specified substring only if it occurs at the end of the String.';
			this.addParameter('substring', 'String', '');
		}
		public override void execute() {
			String substring = (String)getParameter('substring').value.stringValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).removeEnd(
				substring);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringRemoveEndIgnoreCase extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'removeEndIgnoreCase';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Removes the specified substring only if it occurs at the end of the String using a case-insensitive match.';
			this.addParameter('substring', 'String', '');
		}
		public override void execute() {
			String substring = (String)getParameter('substring').value.stringValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).removeEndIgnoreCase(
				substring);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringRemoveStart extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'removeStart';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Removes the specified substring only if it occurs at the beginning of the String.';
			this.addParameter('substring', 'String', '');
		}
		public override void execute() {
			String substring = (String)getParameter('substring').value.stringValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).removeStart(
				substring);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringRemoveStartIgnoreCase extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'removeStartIgnoreCase';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Removes the specified substring only if it occurs at the beginning of the String using a case-insensitive match.';
			this.addParameter('substring', 'String', '');
		}
		public override void execute() {
			String substring = (String)getParameter('substring').value.stringValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).removeStartIgnoreCase(
				substring);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringRepeat extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'repeat';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns the current String repeated the specified number of times. ';
			this.addParameter('numberOfTimes', 'Integer', '');
		}
		public override void execute() {
			Integer numberOfTimes = (Integer)getParameter('numberOfTimes').value.integerValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).repeat(
				numberOfTimes);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemString2Repeat extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'repeat';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns the current String repeated the specified number of times using the specified separator to separate the repeated Strings. ';
			this.addParameter('separator', 'String', '');
			this.addParameter('numberOfTimes', 'Integer', '');
		}
		public override void execute() {
			String separator = (String)getParameter('separator').value.stringValue;
			Integer numberOfTimes = (Integer)getParameter('numberOfTimes').value.integerValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).repeat(
				separator,numberOfTimes);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringReplace extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'replace';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Replaces each substring of a string that matches the literal target sequence ';
			this.addParameter('target', 'String', '');
			this.addParameter('replacement', 'String', '');
		}
		public override void execute() {
			String target = (String)getParameter('target').value.stringValue;
			String replacement = (String)getParameter('replacement').value.stringValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).replace(
				target,replacement);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringReplaceAll extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'replaceAll';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Replaces each substring of a string that matches the regular expression ';
			this.addParameter('regExp', 'String', '');
			this.addParameter('replacement', 'String', '');
		}
		public override void execute() {
			String regExp = (String)getParameter('regExp').value.stringValue;
			String replacement = (String)getParameter('replacement').value.stringValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).replaceAll(
				regExp,replacement);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringReplaceFirst extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'replaceFirst';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Replaces the first substring of a string that matches the regular expression ';
			this.addParameter('regExp', 'String', '');
			this.addParameter('replacement', 'String', '');
		}
		public override void execute() {
			String regExp = (String)getParameter('regExp').value.stringValue;
			String replacement = (String)getParameter('replacement').value.stringValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).replaceFirst(
				regExp,replacement);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringReverse extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'reverse';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a String with all the characters reversed.';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).reverse(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringRight extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'right';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns the rightmost characters of the current String of the specified length.';
			this.addParameter('length', 'Integer', '');
		}
		public override void execute() {
			Integer length = (Integer)getParameter('length').value.integerValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).right(
				length);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringRightPad extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'rightPad';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns the current String padded with spaces on the right and of the specified length. ';
			this.addParameter('length', 'Integer', '');
		}
		public override void execute() {
			Integer length = (Integer)getParameter('length').value.integerValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).rightPad(
				length);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringSplit extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'split';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String[]';
			this.description = ' ';
			this.addParameter('regExp', 'String', '');
		}
		public override void execute() {
			String regExp = (String)getParameter('regExp').value.stringValue;
			this.outputValue.stringListValue = ((String)inputValue.stringValue).split(
				regExp);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemString2Split extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'split';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String[]';
			this.description = 'Returns a list that contains each substring of the String that is terminated by either the regular expression ';
			this.addParameter('regExp', 'String', '');
			this.addParameter('limit', 'Integer', '');
		}
		public override void execute() {
			String regExp = (String)getParameter('regExp').value.stringValue;
			Integer xlimit = (Integer)getParameter('limit').value.integerValue;
			this.outputValue.stringListValue = ((String)inputValue.stringValue).split(
				regExp,xlimit);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringSplitByCharacterType extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'splitByCharacterType';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String[]';
			this.description = 'Splits the current String by character type and returns a list of contiguous character groups of the same type as complete tokens.';
		}
		public override void execute() {
			this.outputValue.stringListValue = ((String)inputValue.stringValue).splitByCharacterType(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringSplitByCharacterTypeCamelCase extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'splitByCharacterTypeCamelCase';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String[]';
			this.description = 'Splits the current String by character type and returns a list of contiguous character groups of the same type as complete tokens, with the following exception: the uppercase character, if any, immediately preceding a lowercase character token belongs to the following character token rather than to the preceding.';
		}
		public override void execute() {
			this.outputValue.stringListValue = ((String)inputValue.stringValue).splitByCharacterTypeCamelCase(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringStartsWith extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'startsWith';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
			this.addParameter('prefix', 'String', '');
		}
		public override void execute() {
			String prefix = (String)getParameter('prefix').value.stringValue;
			this.outputValue.booleanValue = ((String)inputValue.stringValue).startsWith(
				prefix);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringStartsWithIgnoreCase extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'startsWithIgnoreCase';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'Boolean';
			this.description = 'Returns ';
			this.addParameter('prefix', 'String', '');
		}
		public override void execute() {
			String prefix = (String)getParameter('prefix').value.stringValue;
			this.outputValue.booleanValue = ((String)inputValue.stringValue).startsWithIgnoreCase(
				prefix);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringStripHtmlTags extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'stripHtmlTags';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Removes HTML markup and returns plain text.';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).stripHtmlTags(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringSubstring extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'substring';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a new String that begins with the character at the specified zero-based ';
			this.addParameter('startIndex', 'Integer', '');
		}
		public override void execute() {
			Integer startIndex = (Integer)getParameter('startIndex').value.integerValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).substring(
				startIndex);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemString2Substring extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'substring';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a new String that begins with the character at the specified zero-based ';
			this.addParameter('startIndex', 'Integer', '');
			this.addParameter('endIndex', 'Integer', '');
		}
		public override void execute() {
			Integer startIndex = (Integer)getParameter('startIndex').value.integerValue;
			Integer endIndex = (Integer)getParameter('endIndex').value.integerValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).substring(
				startIndex,endIndex);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringSubstringAfter extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'substringAfter';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns the substring that occurs after the first occurrence of the specified separator.';
			this.addParameter('separator', 'String', '');
		}
		public override void execute() {
			String separator = (String)getParameter('separator').value.stringValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).substringAfter(
				separator);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringSubstringAfterLast extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'substringAfterLast';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns the substring that occurs after the last occurrence of the specified separator.';
			this.addParameter('separator', 'String', '');
		}
		public override void execute() {
			String separator = (String)getParameter('separator').value.stringValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).substringAfterLast(
				separator);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringSubstringBefore extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'substringBefore';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns the substring that occurs before the first occurrence of the specified separator.';
			this.addParameter('separator', 'String', '');
		}
		public override void execute() {
			String separator = (String)getParameter('separator').value.stringValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).substringBefore(
				separator);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringSubstringBeforeLast extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'substringBeforeLast';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns the substring that occurs before the last occurrence of the specified separator.';
			this.addParameter('separator', 'String', '');
		}
		public override void execute() {
			String separator = (String)getParameter('separator').value.stringValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).substringBeforeLast(
				separator);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringSubstringBetween extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'substringBetween';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns the substring that occurs between two instances of the specified ';
			this.addParameter('tag', 'String', '');
		}
		public override void execute() {
			String tag = (String)getParameter('tag').value.stringValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).substringBetween(
				tag);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemString2SubstringBetween extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'substringBetween';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns the substring that occurs between the two specified Strings.';
			this.addParameter('open', 'String', '');
			this.addParameter('close', 'String', '');
		}
		public override void execute() {
			String open = (String)getParameter('open').value.stringValue;
			String close = (String)getParameter('close').value.stringValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).substringBetween(
				open,close);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringSwapCase extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'swapCase';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Swaps the case of all characters and returns the resulting String by using the default (English US) locale. ';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).swapCase(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringToLowerCase extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'toLowerCase';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Converts all of the characters in the String to lowercase using the rules of the default (English US) locale.';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).toLowerCase(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemString2ToLowerCase extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'toLowerCase';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Converts all of the characters in the String to lowercase using the rules of the specified locale.';
			this.addParameter('locale', 'String', '');
		}
		public override void execute() {
			String locale = (String)getParameter('locale').value.stringValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).toLowerCase(
				locale);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringToUpperCase extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'toUpperCase';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Converts all of the characters in the String to uppercase using the rules of the default (English US) locale.';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).toUpperCase(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemString2ToUpperCase extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'toUpperCase';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Converts all of the characters in the String to the uppercase using the rules of the specified locale. ';
			this.addParameter('locale', 'String', '');
		}
		public override void execute() {
			String locale = (String)getParameter('locale').value.stringValue;
			this.outputValue.stringValue = ((String)inputValue.stringValue).toUpperCase(
				locale);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringTrim extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'trim';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a copy of the string that no longer contains any leading or trailing white space characters. ';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).trim(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringUncapitalize extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'uncapitalize';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns the current String with the first letter in lowercase.';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).uncapitalize(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringUnescapeCsv extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'unescapeCsv';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a String representing an unescaped CSV column.';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).unescapeCsv(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringUnescapeEcmaScript extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'unescapeEcmaScript';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Unescapes any EcmaScript literals found in the String.';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).unescapeEcmaScript(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringUnescapeHtml3 extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'unescapeHtml3';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Unescapes the characters in a String using HTML 3.0 entities.';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).unescapeHtml3(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringUnescapeHtml4 extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'unescapeHtml4';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Unescapes the characters in a String using HTML 4.0 entities.';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).unescapeHtml4(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringUnescapeJava extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'unescapeJava';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a String whose Java literals are unescaped. Literals unescaped include escape sequences for quotes () and control characters, such as tab (t), and carriage return (n).';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).unescapeJava(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringUnescapeUnicode extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'unescapeUnicode';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a String whose escaped Unicode characters are unescaped.';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).unescapeUnicode(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringUnescapeXml extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'unescapeXml';
			this.isStatic = false;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Unescapes the characters in a String using XML entities.';
		}
		public override void execute() {
			this.outputValue.stringValue = ((String)inputValue.stringValue).unescapeXml(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringValueOf extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'valueOf';
			this.isStatic = true;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a String that represents the specified Date in the standard “yyyy-MM-dd” format.';
			this.addParameter('dateToConvert', 'Date', '');
		}
		public override void execute() {
			Date dateToConvert = (Date)getParameter('dateToConvert').value.dateValue;
			this.outputValue.stringValue = String.valueOf(
				dateToConvert
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemString2ValueOf extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'valueOf';
			this.isStatic = true;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a String that represents the specified Datetime in the standard “yyyy-MM-dd HH:mm:ss” format for the local time zone.';
			this.addParameter('datetimeToConvert', 'Datetime', '');
		}
		public override void execute() {
			Datetime datetimeToConvert = (Datetime)getParameter('datetimeToConvert').value.datetimeValue;
			this.outputValue.stringValue = String.valueOf(
				datetimeToConvert
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemString3ValueOf extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'valueOf';
			this.isStatic = true;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a String that represents the specified Decimal.';
			this.addParameter('decimalToConvert', 'Decimal', '');
		}
		public override void execute() {
			Decimal decimalToConvert = (Decimal)getParameter('decimalToConvert').value.decimalValue;
			this.outputValue.stringValue = String.valueOf(
				decimalToConvert
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemString4ValueOf extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'valueOf';
			this.isStatic = true;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a String that represents the specified Double.';
			this.addParameter('doubleToConvert', 'Double', '');
		}
		public override void execute() {
			Double doubleToConvert = (Double)getParameter('doubleToConvert').value.doubleValue;
			this.outputValue.stringValue = String.valueOf(
				doubleToConvert
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemString5ValueOf extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'valueOf';
			this.isStatic = true;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a String that represents the specified Integer.';
			this.addParameter('integerToConvert', 'Integer', '');
		}
		public override void execute() {
			Integer integerToConvert = (Integer)getParameter('integerToConvert').value.integerValue;
			this.outputValue.stringValue = String.valueOf(
				integerToConvert
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemString6ValueOf extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'valueOf';
			this.isStatic = true;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a String that represents the specified Long. ';
			this.addParameter('longToConvert', 'Long', '');
		}
		public override void execute() {
			Long longToConvert = (Long)getParameter('longToConvert').value.longValue;
			this.outputValue.stringValue = String.valueOf(
				longToConvert
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemString7ValueOf extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'valueOf';
			this.isStatic = true;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a string representation of the specified object argument. ';
			this.addParameter('toConvert', 'Object', '');
		}
		public override void execute() {
			Object toConvert = (Object)getParameter('toConvert').value.objectValue;
			this.outputValue.stringValue = String.valueOf(
				toConvert
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemStringValueOfGmt extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'String';
			this.methodName = 'valueOfGmt';
			this.isStatic = true;
			this.inputType = 'String';
			this.outputType = 'String';
			this.description = 'Returns a String that represents the specified Datetime in the standard “yyyy-MM-dd HH:mm:ss” format for the GMT time zone.';
			this.addParameter('datetimeToConvert', 'Datetime', '');
		}
		public override void execute() {
			Datetime datetimeToConvert = (Datetime)getParameter('datetimeToConvert').value.datetimeValue;
			this.outputValue.stringValue = String.valueOfGmt(
				datetimeToConvert
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemUserInfoGetDefaultCurrency extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'UserInfo';
			this.methodName = 'getDefaultCurrency';
			this.isStatic = true;
			this.inputType = 'UserInfo';
			this.outputType = 'String';
			this.description = 'Returns the context user&#39;s default currency code for multiple currency organizations or the organization&#39;s currency code for single currency organizations.';
		}
		public override void execute() {
			this.outputValue.stringValue = UserInfo.getDefaultCurrency(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemUserInfoGetFirstName extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'UserInfo';
			this.methodName = 'getFirstName';
			this.isStatic = true;
			this.inputType = 'UserInfo';
			this.outputType = 'String';
			this.description = 'Returns the context user&#39;s first name';
		}
		public override void execute() {
			this.outputValue.stringValue = UserInfo.getFirstName(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemUserInfoGetLanguage extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'UserInfo';
			this.methodName = 'getLanguage';
			this.isStatic = true;
			this.inputType = 'UserInfo';
			this.outputType = 'String';
			this.description = 'Returns the context user&#39;s language';
		}
		public override void execute() {
			this.outputValue.stringValue = UserInfo.getLanguage(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemUserInfoGetLastName extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'UserInfo';
			this.methodName = 'getLastName';
			this.isStatic = true;
			this.inputType = 'UserInfo';
			this.outputType = 'String';
			this.description = 'Returns the context user&#39;s last name';
		}
		public override void execute() {
			this.outputValue.stringValue = UserInfo.getLastName(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemUserInfoGetLocale extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'UserInfo';
			this.methodName = 'getLocale';
			this.isStatic = true;
			this.inputType = 'UserInfo';
			this.outputType = 'String';
			this.description = 'Returns the context user&#39;s locale.';
		}
		public override void execute() {
			this.outputValue.stringValue = UserInfo.getLocale(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemUserInfoGetName extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'UserInfo';
			this.methodName = 'getName';
			this.isStatic = true;
			this.inputType = 'UserInfo';
			this.outputType = 'String';
			this.description = 'Returns the context user&#39;s full name. The format of the name depends on the language preferences specified for the organization.';
		}
		public override void execute() {
			this.outputValue.stringValue = UserInfo.getName(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemUserInfoGetOrganizationId extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'UserInfo';
			this.methodName = 'getOrganizationId';
			this.isStatic = true;
			this.inputType = 'UserInfo';
			this.outputType = 'String';
			this.description = 'Returns the context organization&#39;s ID.';
		}
		public override void execute() {
			this.outputValue.stringValue = UserInfo.getOrganizationId(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemUserInfoGetOrganizationName extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'UserInfo';
			this.methodName = 'getOrganizationName';
			this.isStatic = true;
			this.inputType = 'UserInfo';
			this.outputType = 'String';
			this.description = 'Returns the context organization&#39;s company name.';
		}
		public override void execute() {
			this.outputValue.stringValue = UserInfo.getOrganizationName(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemUserInfoGetProfileId extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'UserInfo';
			this.methodName = 'getProfileId';
			this.isStatic = true;
			this.inputType = 'UserInfo';
			this.outputType = 'String';
			this.description = 'Returns the context user&#39;s profile ID.';
		}
		public override void execute() {
			this.outputValue.stringValue = UserInfo.getProfileId(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemUserInfoGetSessionId extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'UserInfo';
			this.methodName = 'getSessionId';
			this.isStatic = true;
			this.inputType = 'UserInfo';
			this.outputType = 'String';
			this.description = 'Returns the session ID for the current session.';
		}
		public override void execute() {
			this.outputValue.stringValue = UserInfo.getSessionId(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemUserInfoGetUiTheme extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'UserInfo';
			this.methodName = 'getUiTheme';
			this.isStatic = true;
			this.inputType = 'UserInfo';
			this.outputType = 'String';
			this.description = ' ';
		}
		public override void execute() {
			this.outputValue.stringValue = UserInfo.getUiTheme(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemUserInfoGetUiThemeDisplayed extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'UserInfo';
			this.methodName = 'getUiThemeDisplayed';
			this.isStatic = true;
			this.inputType = 'UserInfo';
			this.outputType = 'String';
			this.description = '';
		}
		public override void execute() {
			this.outputValue.stringValue = UserInfo.getUiThemeDisplayed(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemUserInfoGetUserEmail extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'UserInfo';
			this.methodName = 'getUserEmail';
			this.isStatic = true;
			this.inputType = 'UserInfo';
			this.outputType = 'String';
			this.description = '';
		}
		public override void execute() {
			this.outputValue.stringValue = UserInfo.getUserEmail(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemUserInfoGetUserId extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'UserInfo';
			this.methodName = 'getUserId';
			this.isStatic = true;
			this.inputType = 'UserInfo';
			this.outputType = 'String';
			this.description = 'Returns the context user&#39;s ID';
		}
		public override void execute() {
			this.outputValue.stringValue = UserInfo.getUserId(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemUserInfoGetUserName extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'UserInfo';
			this.methodName = 'getUserName';
			this.isStatic = true;
			this.inputType = 'UserInfo';
			this.outputType = 'String';
			this.description = 'Returns the context user&#39;s login name.';
		}
		public override void execute() {
			this.outputValue.stringValue = UserInfo.getUserName(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemUserInfoGetUserRoleId extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'UserInfo';
			this.methodName = 'getUserRoleId';
			this.isStatic = true;
			this.inputType = 'UserInfo';
			this.outputType = 'String';
			this.description = 'Returns the context user&#39;s role ID.';
		}
		public override void execute() {
			this.outputValue.stringValue = UserInfo.getUserRoleId(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemUserInfoGetUserType extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'UserInfo';
			this.methodName = 'getUserType';
			this.isStatic = true;
			this.inputType = 'UserInfo';
			this.outputType = 'String';
			this.description = 'Returns the context user&#39;s type.';
		}
		public override void execute() {
			this.outputValue.stringValue = UserInfo.getUserType(
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemUserInfoIsCurrentUserLicensed extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'UserInfo';
			this.methodName = 'isCurrentUserLicensed';
			this.isStatic = true;
			this.inputType = 'UserInfo';
			this.outputType = 'Boolean';
			this.description = '';
			this.addParameter('namespace', 'String', '');
		}
		public override void execute() {
			String namespace = (String)getParameter('namespace').value.stringValue;
			this.outputValue.booleanValue = UserInfo.isCurrentUserLicensed(
				namespace
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemUserInfoIsCurrentUserLicensedForPackage extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'UserInfo';
			this.methodName = 'isCurrentUserLicensedForPackage';
			this.isStatic = true;
			this.inputType = 'UserInfo';
			this.outputType = 'Boolean';
			this.description = '';
			this.addParameter('packageID', 'String', '');
		}
		public override void execute() {
			String packageID = (String)getParameter('packageID').value.stringValue;
			this.outputValue.booleanValue = UserInfo.isCurrentUserLicensedForPackage(
				packageID
			);
		}
	}
	// this method wrapper class was auto-generated by ApexFlow
	public class SystemUserInfoIsMultiCurrencyOrganization extends MethodWrapper {
		public override void register() {
			this.namespaceName = 'System';
			this.className = 'UserInfo';
			this.methodName = 'isMultiCurrencyOrganization';
			this.isStatic = true;
			this.inputType = 'UserInfo';
			this.outputType = 'Boolean';
			this.description = 'Specifies whether the organization uses multiple currencies.';
		}
		public override void execute() {
			this.outputValue.booleanValue = UserInfo.isMultiCurrencyOrganization(
			);
		}
	}
}